#!/usr/bin/env bash
# Universal package bundle manager

set -euo pipefail

# Load common functions
source "$(dirname "$0")/common.sh"

# Show usage
show_usage() {
    cat << EOF
Usage: $0 [command]

Commands:
  install   Install packages from packages.yaml (default)
  check     Check if all packages are installed
  list      List packages defined in packages.yaml
  cleanup   Remove packages not in packages.yaml
  dump      Dump current installation state

EOF
    exit 1
}

# Main bundle function
main() {
    local command="${1:-install}"
    local distro=$(detect_platform)
    
    if [[ "$distro" == "unknown" ]]; then
        error "Unknown platform"
        exit 1
    fi
    
    # Ensure yq is available
    ensure_yq
    
    info "Platform: $distro"
    
    case "$command" in
        install)
            bundle_install "$distro"
            ;;
        check)
            bundle_check "$distro"
            ;;
        list)
            bundle_list "$distro"
            ;;
        cleanup)
            bundle_cleanup "$distro"
            ;;
        dump)
            bundle_dump "$distro"
            ;;
        *)
            show_usage
            ;;
    esac
}

# Install all packages for the platform
bundle_install() {
    local distro="$1"
    info "Installing packages for $distro..."
    
    # Get all package managers for this platform
    local package_managers=$(yq eval ".packages.${distro} | keys | .[]" "$PACKAGES_FILE" 2>/dev/null || true)
    
    if [[ -z "$package_managers" ]]; then
        warning "No packages defined for $distro"
        return 0
    fi
    
    # Install packages for each package manager
    while IFS= read -r pm; do
        [[ -z "$pm" ]] && continue
        install_by_package_manager "$distro" "$pm"
    done <<< "$package_managers"
    
    # Run post-install hooks
    run_post_install_hooks
    
    success "Installation complete for $distro"
}

# Install packages using specific package manager
install_by_package_manager() {
    local distro="$1"
    local pm="$2"
    
    info "Installing packages via $pm..."
    
    # Simple array-based package managers
    case "$pm" in
        homebrew_tap|homebrew|homebrew_cask|apt|pacman|aur|dnf|winget|scoop|cargo)
            # Load provider
            if load_provider "${pm%_*}"; then
                # Get packages from YAML
                local packages=$(yq eval ".packages.${distro}.${pm}[]" "$PACKAGES_FILE" 2>/dev/null || true)
                
                # Convert to array
                local pkg_array=()
                while IFS= read -r pkg; do
                    [[ -z "$pkg" || "$pkg" == "null" ]] && continue
                    pkg_array+=("$pkg")
                done <<< "$packages"
                
                # Call provider function if packages exist
                if [[ ${#pkg_array[@]} -gt 0 ]]; then
                    "${pm}_install" "${pkg_array[@]}"
                fi
            else
                warning "Provider not found for $pm"
            fi
            ;;
        
        # Complex structure package managers
        apt_repository|rpm_repository|copr|github_release|script|powershell|git_clone)
            # These need special handling due to complex YAML structure
            if load_provider "${pm%_*}"; then
                "${pm}_install" "$distro"
            else
                warning "Provider not found for $pm"
            fi
            ;;
    esac
}

# Check if all packages are installed
bundle_check() {
    local distro="$1"
    info "Checking packages for $distro..."
    local all_installed=true
    
    # Get all package managers
    local package_managers=$(yq eval ".packages.${distro} | keys | .[]" "$PACKAGES_FILE" 2>/dev/null || true)
    
    while IFS= read -r pm; do
        [[ -z "$pm" ]] && continue
        
        case "$pm" in
            homebrew_tap|homebrew|homebrew_cask|apt|pacman|aur|dnf|winget|scoop|cargo)
                if load_provider "${pm%_*}"; then
                    # Get packages from YAML
                    local packages=$(yq eval ".packages.${distro}.${pm}[]" "$PACKAGES_FILE" 2>/dev/null || true)
                    
                    # Convert to array
                    local pkg_array=()
                    while IFS= read -r pkg; do
                        [[ -z "$pkg" || "$pkg" == "null" ]] && continue
                        pkg_array+=("$pkg")
                    done <<< "$packages"
                    
                    # Check if packages exist
                    if [[ ${#pkg_array[@]} -gt 0 ]]; then
                        "${pm}_check" "${pkg_array[@]}" || all_installed=false
                    fi
                fi
                ;;
            
            apt_repository|rpm_repository|copr|github_release|script|powershell|git_clone)
                if load_provider "${pm%_*}"; then
                    "${pm}_check" "$distro" || all_installed=false
                fi
                ;;
        esac
    done <<< "$package_managers"
    
    if [[ "$all_installed" == "true" ]]; then
        success "All packages are installed"
    else
        error "Some packages are missing"
        exit 1
    fi
}

# List all packages
bundle_list() {
    local distro="$1"
    info "Packages defined for $distro in $PACKAGES_FILE:"
    
    # Get all package managers
    local package_managers=$(yq eval ".packages.${distro} | keys | .[]" "$PACKAGES_FILE" 2>/dev/null || true)
    
    while IFS= read -r pm; do
        [[ -z "$pm" ]] && continue
        
        case "$pm" in
            homebrew_tap|homebrew|homebrew_cask|apt|pacman|aur|dnf|winget|scoop|cargo)
                # Get packages from YAML
                local packages=$(yq eval ".packages.${distro}.${pm}[]" "$PACKAGES_FILE" 2>/dev/null || true)
                
                if [[ -n "$packages" && "$packages" != "null" ]]; then
                    echo -e "\n${GREEN}${pm}:${NC}"
                    echo "$packages" | sed 's/^/  - /'
                fi
                ;;
            
            apt_repository|rpm_repository|copr|github_release|script|powershell|git_clone)
                # Complex structures - show names only
                local count=$(yq eval ".packages.${distro}.${pm} | length" "$PACKAGES_FILE" 2>/dev/null || echo "0")
                if [[ "$count" -gt 0 ]]; then
                    echo -e "\n${GREEN}${pm}:${NC}"
                    for i in $(seq 0 $((count - 1))); do
                        local name=$(yq eval ".packages.${distro}.${pm}[$i].name" "$PACKAGES_FILE" 2>/dev/null || echo "")
                        [[ -n "$name" && "$name" != "null" ]] && echo "  - $name"
                    done
                fi
                ;;
        esac
    done <<< "$package_managers"
}

# Clean up packages not in packages.yaml
bundle_cleanup() {
    local distro="$1"
    warning "This will remove packages not defined in packages.yaml for $distro"
    read -rp "Continue? (y/N): " -n 1 && echo
    [[ ! $REPLY =~ ^[Yy]$ ]] && exit 0
    
    # Get all package managers
    local package_managers=$(yq eval ".packages.${distro} | keys | .[]" "$PACKAGES_FILE" 2>/dev/null || true)
    
    while IFS= read -r pm; do
        [[ -z "$pm" ]] && continue
        
        case "$pm" in
            homebrew|homebrew_cask|apt|pacman|dnf)
                if load_provider "${pm%_*}"; then
                    # Get packages from YAML
                    local packages=$(yq eval ".packages.${distro}.${pm}[]" "$PACKAGES_FILE" 2>/dev/null || true)
                    
                    # Convert to array
                    local pkg_array=()
                    while IFS= read -r pkg; do
                        [[ -z "$pkg" || "$pkg" == "null" ]] && continue
                        pkg_array+=("$pkg")
                    done <<< "$packages"
                    
                    # Call cleanup function
                    if [[ ${#pkg_array[@]} -gt 0 ]]; then
                        "${pm}_cleanup" "${pkg_array[@]}"
                    fi
                fi
                ;;
        esac
    done <<< "$package_managers"
    
    success "Cleanup complete"
}

# Dump current installation state
bundle_dump() {
    local distro="$1"
    info "Generating package list for $distro..."
    
    echo "packages:"
    echo "  $distro:"
    
    case "$distro" in
        macos)
            load_provider "homebrew" && homebrew_dump
            ;;
        debian)
            load_provider "apt" && apt_dump
            ;;
        arch)
            load_provider "pacman" && pacman_dump
            ;;
        fedora)
            load_provider "dnf" && dnf_dump
            ;;
        windows)
            load_provider "winget" && winget_dump
            ;;
    esac
}

# Run main
main "$@"