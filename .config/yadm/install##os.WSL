#!/usr/bin/env bash
# Bootstrap for WSL

set -euo pipefail

# This script extends the Linux bootstrap with WSL-specific setup
# It should be run instead of the Linux script when on WSL

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Cleanup function
cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        echo
        echo "Installation interrupted. You can safely run it again."
    fi
    exit $exit_code
}

# Set trap for cleanup
trap cleanup EXIT INT TERM

# Logging
info() { echo -e "${BLUE}==>${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }
warning() { echo -e "${YELLOW}!${NC} $1"; }

info "Running WSL bootstrap..."

# Run the Linux bootstrap script
BOOTSTRAP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
if [[ -f "$BOOTSTRAP_DIR/install##os.Linux" ]]; then
    # Mark that we're in WSL for the Linux script
    export WSL_DISTRO_NAME="${WSL_DISTRO_NAME:-WSL}"
    export IS_WSL=true
    
    # Execute Linux bootstrap
    bash "$BOOTSTRAP_DIR/install##os.Linux"
else
    error "Linux bootstrap script not found!"
    exit 1
fi

# WSL-specific setup functions
setup_wsl_config() {
    if [[ -f "$HOME/.config/wsl/wsl.conf" ]] && [[ ! -f "/etc/wsl.conf" ]]; then
        info "Installing WSL configuration..."
        # Replace $USER placeholder with actual username
        sed "s/\$USER/$USER/g" "$HOME/.config/wsl/wsl.conf" | sudo tee /etc/wsl.conf > /dev/null
        success "wsl.conf installed (restart WSL2 to apply)"
    elif [[ -f "/etc/wsl.conf" ]]; then
        info "wsl.conf already exists, skipping..."
    fi
}

# Install WSL-specific utilities
install_wsl_utils() {
    info "Installing WSL utilities..."
    
    # Detect distribution
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        local distro="${ID,,}"
    else
        local distro="unknown"
    fi
    
    case "$distro" in
        ubuntu|debian)
            local packages=(
                wslu          # WSL utilities
                socat         # Socket relay
                x11-utils     # X11 utilities for GUI apps
            )
            
            for pkg in "${packages[@]}"; do
                if ! dpkg -l "$pkg" &>/dev/null; then
                    sudo apt-get install -y "$pkg" || warning "Failed to install $pkg"
                fi
            done
            ;;
        arch|manjaro)
            sudo pacman -S --needed --noconfirm wslu socat xorg-xhost || true
            ;;
        fedora)
            sudo dnf install -y wslu socat xorg-x11-utils || true
            ;;
    esac
    
    success "WSL utilities installed"
}

# Configure WSL-Windows integration
setup_wsl_integration() {
    info "Setting up WSL-Windows integration..."
    
    # Create Windows symlinks in home directory
    if [[ -n "${USERPROFILE:-}" ]]; then
        # Convert Windows path to WSL path
        local win_home="/mnt/c/Users/${USER}"
        
        if [[ -d "$win_home" ]]; then
            # Create convenient symlinks
            [[ ! -e "$HOME/Downloads" ]] && ln -s "$win_home/Downloads" "$HOME/Downloads" 2>/dev/null || true
            [[ ! -e "$HOME/Documents" ]] && ln -s "$win_home/Documents" "$HOME/Documents" 2>/dev/null || true
            [[ ! -e "$HOME/Desktop" ]] && ln -s "$win_home/Desktop" "$HOME/Desktop" 2>/dev/null || true
        fi
    fi
    
    # Setup clipboard integration via win32yank if available
    if command -v win32yank.exe &>/dev/null; then
        success "Windows clipboard integration available"
    else
        warning "win32yank.exe not found - clipboard integration may be limited"
    fi
}

# Show WSL-specific summary
show_wsl_summary() {
    echo
    echo "WSL-specific setup:"
    echo "  ✓ WSL configuration files"
    echo "  ✓ WSL utilities (wslu, socat)"
    echo "  ✓ Windows integration"
    echo
    echo "WSL tips:"
    echo "  - Use 'wslview' to open files in Windows"
    echo "  - Use 'explorer.exe .' to open Windows Explorer"
    echo "  - GUI apps should work with WSLg"
    [[ -f "/etc/wsl.conf" ]] && echo "  - Restart WSL to apply wsl.conf changes"
}

# Run WSL-specific setup
info "Running WSL-specific configuration..."
setup_wsl_config
install_wsl_utils
setup_wsl_integration
show_wsl_summary

success "WSL setup completed!"