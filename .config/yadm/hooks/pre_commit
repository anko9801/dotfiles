#!/usr/bin/env bash
# yadm pre_commit hook - implements all checks from pre-commit-config.yaml

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${YELLOW}Running pre-commit checks...${NC}"

# Get list of files to be committed
FILES=$(yadm diff --cached --name-only)
if [[ -z "$FILES" ]]; then
    echo "No files to check"
    exit 0
fi

# Track if any check fails
FAILED=0

# 1. Trailing whitespace
echo -n "Checking for trailing whitespace... "
if echo "$FILES" | xargs grep -l '[[:space:]]$' 2>/dev/null; then
    echo -e "${RED}FAILED${NC}"
    echo "  Remove trailing whitespace from the above files"
    FAILED=1
else
    echo -e "${GREEN}OK${NC}"
fi

# 2. End of file fixer (files should end with newline)
echo -n "Checking for missing newline at end of files... "
MISSING_NEWLINE=""
for file in $FILES; do
    if [[ -f "$file" ]] && [[ -s "$file" ]] && [[ $(tail -c1 "$file" | wc -l) -eq 0 ]]; then
        MISSING_NEWLINE="$MISSING_NEWLINE $file"
    fi
done
if [[ -n "$MISSING_NEWLINE" ]]; then
    echo -e "${RED}FAILED${NC}"
    echo "  Add newline to:$MISSING_NEWLINE"
    FAILED=1
else
    echo -e "${GREEN}OK${NC}"
fi

# 3. Check merge conflict markers
echo -n "Checking for merge conflict markers... "
if echo "$FILES" | xargs grep -E '<<<<<<< |======= |>>>>>>> ' 2>/dev/null; then
    echo -e "${RED}FAILED${NC}"
    FAILED=1
else
    echo -e "${GREEN}OK${NC}"
fi

# 4. Detect private keys
echo -n "Checking for private keys... "
if echo "$FILES" | xargs grep -E 'BEGIN (RSA|DSA|EC|OPENSSH) PRIVATE KEY' 2>/dev/null; then
    echo -e "${RED}FAILED${NC}"
    echo "  Private key detected!"
    FAILED=1
else
    echo -e "${GREEN}OK${NC}"
fi

# 5. Check for large files (>1MB)
echo -n "Checking for large files (>1MB)... "
LARGE_FILES=""
for file in $FILES; do
    if [[ -f "$file" ]]; then
        SIZE=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
        if [[ $SIZE -gt 1048576 ]]; then
            LARGE_FILES="$LARGE_FILES $file($(($SIZE/1048576))MB)"
        fi
    fi
done
if [[ -n "$LARGE_FILES" ]]; then
    echo -e "${RED}FAILED${NC}"
    echo "  Large files:$LARGE_FILES"
    FAILED=1
else
    echo -e "${GREEN}OK${NC}"
fi

# 6. Check case conflicts (e.g., File.txt and file.txt)
echo -n "Checking for case conflicts... "
LOWERCASE_FILES=$(echo "$FILES" | tr '[:upper:]' '[:lower:]' | sort)
if [[ $(echo "$LOWERCASE_FILES" | uniq -d) ]]; then
    echo -e "${RED}FAILED${NC}"
    echo "  Case conflict detected"
    FAILED=1
else
    echo -e "${GREEN}OK${NC}"
fi

# 7. Check executables have shebangs
echo -n "Checking executables have shebangs... "
NO_SHEBANG=""
for file in $FILES; do
    if [[ -f "$file" ]] && [[ -x "$file" ]]; then
        if ! head -n1 "$file" | grep -q '^#!'; then
            NO_SHEBANG="$NO_SHEBANG $file"
        fi
    fi
done
if [[ -n "$NO_SHEBANG" ]]; then
    echo -e "${RED}FAILED${NC}"
    echo "  Missing shebang:$NO_SHEBANG"
    FAILED=1
else
    echo -e "${GREEN}OK${NC}"
fi

# 8. Check JSON files
echo -n "Checking JSON files... "
JSON_ERRORS=""
for file in $FILES; do
    if [[ "$file" =~ \.json$ ]] && [[ -f "$file" ]]; then
        if ! python3 -m json.tool "$file" >/dev/null 2>&1; then
            JSON_ERRORS="$JSON_ERRORS $file"
        fi
    fi
done
if [[ -n "$JSON_ERRORS" ]]; then
    echo -e "${RED}FAILED${NC}"
    echo "  Invalid JSON:$JSON_ERRORS"
    FAILED=1
else
    echo -e "${GREEN}OK${NC}"
fi

# 9. Check YAML files
echo -n "Checking YAML files... "
YAML_ERRORS=""
for file in $FILES; do
    if [[ "$file" =~ \.(yml|yaml)$ ]] && [[ -f "$file" ]]; then
        if command -v python3 >/dev/null 2>&1; then
            if ! python3 -c "import yaml; yaml.safe_load(open('$file'))" 2>/dev/null; then
                YAML_ERRORS="$YAML_ERRORS $file"
            fi
        fi
    fi
done
if [[ -n "$YAML_ERRORS" ]]; then
    echo -e "${RED}FAILED${NC}"
    echo "  Invalid YAML:$YAML_ERRORS"
    FAILED=1
else
    echo -e "${GREEN}OK${NC}"
fi

# 10. Check TOML files
echo -n "Checking TOML files... "
TOML_ERRORS=""
for file in $FILES; do
    if [[ "$file" =~ \.toml$ ]] && [[ -f "$file" ]]; then
        if command -v python3 >/dev/null 2>&1; then
            if ! python3 -c "import toml; toml.load('$file')" 2>/dev/null; then
                TOML_ERRORS="$TOML_ERRORS $file"
            fi
        fi
    fi
done
if [[ -n "$TOML_ERRORS" ]]; then
    echo -e "${RED}FAILED${NC}"
    echo "  Invalid TOML:$TOML_ERRORS"
    FAILED=1
else
    echo -e "${GREEN}OK${NC}"
fi

# 11. Run git-secrets if available
if command -v git-secrets &> /dev/null; then
    echo -n "Running git-secrets... "
    if ! git-secrets --pre_commit_hook -- "$@"; then
        echo -e "${RED}FAILED${NC}"
        FAILED=1
    else
        echo -e "${GREEN}OK${NC}"
    fi
fi

# 12. ShellCheck for shell scripts
if command -v shellcheck &> /dev/null; then
    echo -n "Running ShellCheck... "
    SHELL_ERRORS=""
    for file in $FILES; do
        if [[ "$file" =~ \.(sh|bash|zsh)$ ]] && [[ ! "$file" =~ ^\.zinit/ ]] && [[ -f "$file" ]]; then
            if ! shellcheck "$file" >/dev/null 2>&1; then
                SHELL_ERRORS="$SHELL_ERRORS $file"
            fi
        fi
    done
    if [[ -n "$SHELL_ERRORS" ]]; then
        echo -e "${RED}FAILED${NC}"
        echo "  ShellCheck errors in:$SHELL_ERRORS"
        echo "  Run 'shellcheck <file>' for details"
        FAILED=1
    else
        echo -e "${GREEN}OK${NC}"
    fi
fi

# Summary
echo
if [[ $FAILED -eq 0 ]]; then
    echo -e "${GREEN}All pre-commit checks passed!${NC}"
    exit 0
else
    echo -e "${RED}Pre-commit checks failed!${NC}"
    echo "Fix the issues above and try again."
    exit 1
fi