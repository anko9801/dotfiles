#!/usr/bin/env bash
# yadm pre_commit hook - security checks for dotfiles

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${YELLOW}Running security checks...${NC}"

# Get list of files to be committed
FILES=$(yadm diff --cached --name-only)
if [[ -z "$FILES" ]]; then
    echo "No files to check"
    exit 0
fi

# Track if any check fails
FAILED=0

# 1. Run git-secrets if available
if command -v git-secrets &> /dev/null; then
    echo -n "Running git-secrets... "
    if ! git-secrets --pre_commit_hook -- "$@"; then
        echo -e "${RED}FAILED${NC}"
        FAILED=1
    else
        echo -e "${GREEN}OK${NC}"
    fi
fi

# 2. Detect private keys
echo -n "Checking for private keys... "
if echo "$FILES" | xargs grep -E 'BEGIN (RSA|DSA|EC|OPENSSH|PGP) PRIVATE KEY' 2>/dev/null; then
    echo -e "${RED}FAILED${NC}"
    echo "  Private key detected! Use 1Password SSH Agent instead."
    FAILED=1
else
    echo -e "${GREEN}OK${NC}"
fi

# 3. Additional secret patterns for dotfiles
echo -n "Checking for hardcoded secrets... "
patterns=(
    # API Keys and Tokens
    'api[_-]?key.*[:=]\s*["'\'']*[a-zA-Z0-9_-]{20,}'
    'token.*[:=]\s*["'\'']*[a-zA-Z0-9_-]{20,}'
    'secret.*[:=]\s*["'\'']*[a-zA-Z0-9_-]{20,}'
    
    # AWS
    'AKIA[0-9A-Z]{16}'
    'aws[_-]?access[_-]?key[_-]?id'
    'aws[_-]?secret[_-]?access[_-]?key'
    
    # Database URLs with passwords
    '(mysql|postgresql|mongodb)://[^:]+:[^@]+@'
    
    # OAuth tokens
    'oauth[_-]?token'
    'bearer\s+[a-zA-Z0-9_-]{20,}'
)

SECRET_FOUND=0
for pattern in "${patterns[@]}"; do
    if git diff --cached --name-only -z | xargs -0 grep -E "$pattern" 2>/dev/null; then
        SECRET_FOUND=1
        break
    fi
done

if [[ $SECRET_FOUND -eq 1 ]]; then
    echo -e "${RED}FAILED${NC}"
    echo "  Possible secret detected! Use 1Password op:// references instead."
    FAILED=1
else
    echo -e "${GREEN}OK${NC}"
fi

# 4. Check for dangerous files that should never be in dotfiles
echo -n "Checking for dangerous files... "
dangerous_files=(
    # Private keys
    '.ssh/id_rsa'
    '.ssh/id_dsa'
    '.ssh/id_ecdsa'
    '.ssh/id_ed25519'
    
    # Cloud credentials
    '.aws/credentials'
    '.gcloud/credentials.json'
    '.azure/credentials'
    
    # Environment files with secrets
    '.env.local'
    '.env.production'
    '.env.*.local'
    
    # Application secrets
    '.npmrc'
    '.pypirc'
    '.docker/config.json'
    
    # GPG keys
    '.gnupg/secring.gpg'
    '.gnupg/private-keys-v1.d/*'
)

DANGEROUS_FOUND=0
for file in "${dangerous_files[@]}"; do
    if git diff --cached --name-only | grep -qE "^${file}$"; then
        echo -e "${RED}FAILED${NC}"
        echo "  Dangerous file detected: $file"
        echo "  This file likely contains secrets. Add to .gitignore or encrypt with yadm."
        DANGEROUS_FOUND=1
        FAILED=1
        break
    fi
done

if [[ $DANGEROUS_FOUND -eq 0 ]]; then
    echo -e "${GREEN}OK${NC}"
fi

# 5. Warn about unencrypted sensitive files
sensitive_files=(
    '.ssh/config'
    '.gitconfig'
    '.netrc'
)

for file in "${sensitive_files[@]}"; do
    if git diff --cached --name-only | grep -qE "^${file}$"; then
        if ! yadm list --encrypt | grep -qE "^${file}$"; then
            echo -e "${YELLOW}Warning:${NC} Committing potentially sensitive file: $file"
            echo "  Consider adding it to .config/yadm/encrypt for encryption."
        fi
    fi
done

# Summary
echo
if [[ $FAILED -eq 0 ]]; then
    echo -e "${GREEN}All security checks passed!${NC}"
    exit 0
else
    echo -e "${RED}Security checks failed!${NC}"
    echo "Fix the issues above and try again."
    exit 1
fi