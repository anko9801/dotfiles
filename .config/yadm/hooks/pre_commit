#!/usr/bin/env bash
# yadm pre_commit hook

set -euo pipefail

# Colors for important messages
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m'

echo -e "${YELLOW}Running pre-commit checks...${NC}"

# Check for trailing whitespace
echo -n "Checking for trailing whitespace... "
if git diff --cached --check >/dev/null 2>&1; then
    echo -e "${GREEN}OK${NC}"
else
    echo -e "${RED}FAILED${NC}"
    git diff --cached --check
    exit 1
fi

# Check for missing newline at end of files
echo -n "Checking for missing newline at end of files... "
failed_files=""
while IFS= read -r -d '' file; do
    if [[ -f "$file" ]] && [[ -s "$file" ]] && [[ "$(tail -c1 "$file" | wc -l)" -eq 0 ]]; then
        failed_files+="  $file"$'\n'
    fi
done < <(git diff --cached --name-only -z)

if [[ -n "$failed_files" ]]; then
    echo -e "${RED}FAILED${NC}"
    echo -e "Add newline to:\n$failed_files"
    exit 1
else
    echo -e "${GREEN}OK${NC}"
fi

# Check for merge conflict markers
echo -n "Checking for merge conflict markers... "
if git diff --cached --name-only -z | xargs -0 grep -H -n '^[<=>]\{7\}' 2>/dev/null; then
    echo -e "${RED}FAILED${NC}"
    echo "Remove merge conflict markers before committing"
    exit 1
else
    echo -e "${GREEN}OK${NC}"
fi

# Check for private keys
echo -n "Checking for private keys... "
if git diff --cached --name-only -z | xargs -0 grep -l 'BEGIN.*PRIVATE KEY' 2>/dev/null; then
    echo -e "${RED}FAILED${NC}"
    echo "Private keys detected! Use 1Password SSH agent instead"
    exit 1
else
    echo -e "${GREEN}OK${NC}"
fi

# Check for large files
echo -n "Checking for large files (>1MB)... "
large_files=""
while IFS= read -r -d '' file; do
    if [[ -f "$file" ]]; then
        size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
        if [[ $size -gt 1048576 ]]; then
            size_mb=$((size / 1048576))
            large_files+="  $file (${size_mb}MB)"$'\n'
        fi
    fi
done < <(git diff --cached --name-only -z)

if [[ -n "$large_files" ]]; then
    echo -e "${RED}FAILED${NC}"
    echo -e "Large files detected:\n$large_files"
    echo "Consider using git-lfs or excluding from repository"
    exit 1
else
    echo -e "${GREEN}OK${NC}"
fi

# Check for case conflicts
echo -n "Checking for case conflicts... "
if git diff --cached --name-only | sort -f | uniq -i -d | grep .; then
    echo -e "${RED}FAILED${NC}"
    echo "Case conflicts detected (files that differ only in case)"
    exit 1
else
    echo -e "${GREEN}OK${NC}"
fi

# Check executables have shebangs
echo -n "Checking executables have shebangs... "
no_shebang=""
while IFS= read -r -d '' file; do
    if [[ -f "$file" && -x "$file" ]]; then
        if ! head -1 "$file" | grep -q '^#!'; then
            no_shebang+="  $file"$'\n'
        fi
    fi
done < <(git diff --cached --name-only -z)

if [[ -n "$no_shebang" ]]; then
    echo -e "${RED}FAILED${NC}"
    echo -e "Executable files without shebang:\n$no_shebang"
    exit 1
else
    echo -e "${GREEN}OK${NC}"
fi

# Basic file format validation
echo -n "Checking JSON files... "
failed=0
while IFS= read -r file; do
    if [[ "$file" == *.json ]]; then
        if ! python3 -m json.tool "$file" >/dev/null 2>&1; then
            echo -e "${RED}FAILED${NC}"
            echo "  Invalid JSON: $file"
            failed=1
        fi
    fi
done < <(git diff --cached --name-only)
[[ $failed -eq 0 ]] && echo -e "${GREEN}OK${NC}"

echo -n "Checking YAML files... "
failed=0
while IFS= read -r file; do
    if [[ "$file" == *.yaml || "$file" == *.yml ]]; then
        if command -v yq &>/dev/null; then
            if ! yq eval '.' "$file" >/dev/null 2>&1; then
                echo -e "${RED}FAILED${NC}"
                echo "  Invalid YAML: $file"
                failed=1
            fi
        fi
    fi
done < <(git diff --cached --name-only)
[[ $failed -eq 0 ]] && echo -e "${GREEN}OK${NC}"

echo -n "Checking TOML files... "
failed=0
while IFS= read -r file; do
    if [[ "$file" == *.toml ]]; then
        if command -v tomlv &>/dev/null || command -v python3 &>/dev/null; then
            if command -v tomlv &>/dev/null; then
                if ! tomlv "$file" >/dev/null 2>&1; then
                    echo -e "${RED}FAILED${NC}"
                    echo "  Invalid TOML: $file"
                    failed=1
                fi
            elif ! python3 -c "import toml; toml.load('$file')" 2>/dev/null; then
                echo -e "${RED}FAILED${NC}"
                echo "  Invalid TOML: $file"
                failed=1
            fi
        fi
    fi
done < <(git diff --cached --name-only)
[[ $failed -eq 0 ]] && echo -e "${GREEN}OK${NC}"

# Run gitleaks if available
echo -n "Running gitleaks... "
if command -v gitleaks &>/dev/null; then
    if gitleaks protect --staged --redact \
        --config "${GITLEAKS_CONFIG:-$HOME/.config/gitleaks/config.toml}" \
        --exit-code 1 >/dev/null 2>&1; then
        echo -e "${GREEN}OK${NC}"
    else
        echo -e "${RED}FAILED${NC}"
        echo "Secrets detected! Run 'gitleaks protect --staged --verbose' for details"
        exit 1
    fi
else
    echo -e "${YELLOW}SKIPPED${NC} (gitleaks not installed)"
fi

echo -e "\n${GREEN}Pre-commit checks passed!${NC}"
exit 0