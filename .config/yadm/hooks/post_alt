#!/usr/bin/env bash
# 1Password SSH integration hook for yadm

set -e

# Cleanup function
cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        echo "Post-alt hook interrupted."
    fi
    exit $exit_code
}

# Set trap for cleanup
trap cleanup EXIT INT TERM

# Setup 1Password SSH agent integration
setup_1password_ssh() {
    echo "Setting up 1Password SSH integration..."
    
    # Create SSH config directory if it doesn't exist
    mkdir -p "$HOME/.ssh"
    chmod 700 "$HOME/.ssh"
    
    # Check if 1Password is installed
    if command -v op >/dev/null 2>&1; then
        # Create or update SSH config for 1Password agent
        SSH_CONFIG="$HOME/.ssh/config"
        
        # Backup existing config only if we're going to modify it
        backup_made=false
        
        # Check if 1Password SSH agent config already exists
        if ! grep -q "IdentityAgent.*1Password" "$SSH_CONFIG" 2>/dev/null; then
            echo "Adding 1Password SSH agent to SSH config..."
            
            # Backup before modifying
            if [[ -f "$SSH_CONFIG" ]]; then
                cp "$SSH_CONFIG" "$SSH_CONFIG.backup"
                backup_made=true
            fi
            
            # Determine the correct socket path based on OS
            if [[ "$OSTYPE" == "darwin"* ]]; then
                SOCKET_PATH="~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"
            else
                SOCKET_PATH="~/.1password/agent.sock"
            fi
            
            # Add 1Password SSH agent configuration
            cat >> "$SSH_CONFIG" <<EOF

# 1Password SSH Agent
Host *
    IdentityAgent "$SOCKET_PATH"
EOF
            echo "1Password SSH agent configuration added."
        else
            echo "1Password SSH agent already configured."
        fi
        
        # Create 1Password config directory
        mkdir -p "$HOME/.config/op"
        
        # Create 1Password CLI config if not exists
        if [[ ! -f "$HOME/.config/op/config" ]]; then
            cat > "$HOME/.config/op/config" <<EOF
{
  "latest_signin": "",
  "device": "$(uuidgen || cat /proc/sys/kernel/random/uuid 2>/dev/null || echo 'default-device')",
  "commands": {
    "biometric_unlock": true
  },
  "cache": {
    "session": {
      "ttl": 1800
    }
  }
}
EOF
            echo "1Password CLI configuration created."
        fi
    else
        echo "Warning: 1Password CLI (op) not found. Please install it first."
        echo "Visit: https://developer.1password.com/docs/cli/get-started/"
    fi
}

# Post-alt hook - runs after yadm creates alternates/templates
echo "Running post-alt hook..."

# Setup 1Password SSH
setup_1password_ssh

# Regenerate compiled configurations
regenerate_configs() {
    echo "Regenerating compiled configurations..."
    
    # Reload tmux config if tmux is running
    if command -v tmux >/dev/null 2>&1 && tmux list-sessions >/dev/null 2>&1; then
        echo "Reloading tmux configuration..."
        tmux source-file "$HOME/.config/tmux/tmux.conf" || true
    fi
    
    # Reload starship if shell is running
    if command -v starship >/dev/null 2>&1; then
        echo "Starship configuration updated. Restart your shell to see changes."
    fi
    
    # Update atuin if installed
    if command -v atuin >/dev/null 2>&1; then
        echo "Atuin configuration updated."
    fi
}

# Set correct permissions
set_permissions() {
    echo "Setting correct permissions..."
    
    # SSH directory
    if [[ -d "$HOME/.ssh" ]]; then
        chmod 700 "$HOME/.ssh"
        find "$HOME/.ssh" -type f -name "id_*" ! -name "*.pub" -exec chmod 600 {} \;
        find "$HOME/.ssh" -type f -name "*.pub" -exec chmod 644 {} \;
        [[ -f "$HOME/.ssh/config" ]] && chmod 600 "$HOME/.ssh/config"
    fi
    
    # GPG directory
    if [[ -d "$HOME/.gnupg" ]]; then
        chmod 700 "$HOME/.gnupg"
        find "$HOME/.gnupg" -type f -exec chmod 600 {} \;
    fi
}

# Run all setup functions
regenerate_configs
set_permissions

echo "Post-alt hook completed!"