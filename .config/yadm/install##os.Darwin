#!/usr/bin/env bash
# Bootstrap for macOS

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging
info() { echo -e "${BLUE}==>${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }
warning() { echo -e "${YELLOW}!${NC} $1"; }

info "Running macOS bootstrap..."

# 1. Create necessary directories first
info "Creating directories..."
mkdir -p "$HOME/.config" "$HOME/.local/bin" "$HOME/.local/share" "$HOME/.cache"

# 2. Install Homebrew (required for everything else)
if ! command -v brew &>/dev/null; then
    info "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    
    # Add Homebrew to PATH for this session
    if [[ -d "/opt/homebrew" ]]; then
        eval "$(/opt/homebrew/bin/brew shellenv)"
    else
        eval "$(/usr/local/bin/brew shellenv)"
    fi
    success "Homebrew installed"
fi

# 3. Update Homebrew
info "Updating Homebrew..."
brew update

# Optionally upgrade existing packages
if [[ "${BREW_UPGRADE:-false}" == "true" ]]; then
    info "Upgrading Homebrew packages..."
    brew upgrade
fi

# 4. Install all packages from Brewfile (includes mise, git-secrets, gh, etc.)
if [[ -f "$HOME/.config/homebrew/Brewfile" ]]; then
    info "Installing packages from Brewfile..."
    brew bundle --file="$HOME/.config/homebrew/Brewfile" --no-lock
    success "Packages installed"
else
    error "Brewfile not found. Run 'yadm alt' first."
    exit 1
fi

# 5. Setup mise and install language runtimes
if command -v mise &>/dev/null; then
    info "Setting up mise..."
    export PATH="$HOME/.local/bin:$PATH"
    eval "$(mise activate bash)"
    
    # Trust config file
    mise trust "$HOME/.config/mise/config.toml" || true
    
    # Install all tools defined in config.toml
    info "Installing tools from mise config..."
    mise install || true
    
    success "mise configured"
else
    warning "mise not found. Install it from https://mise.run"
fi

# 6. Setup development tools (requires languages from mise)
info "Setting up development tools..."

# Git secrets configuration
if command -v git-secrets &>/dev/null; then
    mkdir -p ~/.config/git/templates/git-secrets
    git secrets --install ~/.config/git/templates/git-secrets >/dev/null 2>&1 || true
    git config --global init.templateDir ~/.config/git/templates/git-secrets
    git secrets --register-aws >/dev/null 2>&1 || true
    success "git-secrets configured"
fi

# Global npm packages are now managed by mise config.toml

# Install GitHub Copilot CLI extension
if command -v gh &>/dev/null; then
    if ! gh extension list | grep -q "github/gh-copilot"; then
        gh extension install github/gh-copilot || true
    fi
fi

# 7. Setup Zsh and antidote
info "Setting up Zsh..."
if [[ ! -d "${ZDOTDIR:-$HOME}/.antidote" ]]; then
    git clone --depth=1 https://github.com/mattmc3/antidote.git "${ZDOTDIR:-$HOME}/.antidote"
    success "antidote installed"
fi

# 8. macOS system settings (optional, at the end)
if [[ "${YADM_BOOTSTRAP_MACOS_SETTINGS:-true}" != "false" ]]; then
    info "Configuring macOS settings..."
    
    # Show hidden files in Finder
    defaults write com.apple.finder AppleShowAllFiles -bool true
    
    # Enable fast key repeat
    defaults write NSGlobalDomain KeyRepeat -int 2
    defaults write NSGlobalDomain InitialKeyRepeat -int 15
    
    # Disable press-and-hold for keys
    defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
    
    # Restart Finder to apply changes
    killall Finder || true
    success "macOS settings applied"
fi

# 9. Final summary
success "Bootstrap completed!"
echo
echo "Installed tools:"
echo "  ✓ Homebrew packages (via Brewfile)"
echo "  ✓ mise with all configured tools"
echo "  ✓ Development tools and Git configuration"
echo "  ✓ Zsh with antidote"
[[ "${YADM_BOOTSTRAP_MACOS_SETTINGS:-true}" != "false" ]] && echo "  ✓ macOS settings"
echo
echo "Configuration: class=$(yadm config local.class || echo "personal")"
echo
echo "Next steps:"
echo "1. Restart your terminal"
echo "2. Run 'exec zsh' to switch to Zsh"
echo "3. If needed: chsh -s $(which zsh)"