#!/usr/bin/env bash
# Bootstrap for macOS

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Cleanup function
cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        echo
        echo "Installation interrupted. You can safely run it again."
    fi
    exit $exit_code
}

# Set trap for cleanup
trap cleanup EXIT INT TERM

# Logging
info() { echo -e "${BLUE}==>${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }
warning() { echo -e "${YELLOW}!${NC} $1"; }

info "Running macOS bootstrap..."

# Create necessary directories
setup_directories() {
    info "Creating directories..."
    local dirs=(
        "$HOME/.config"
        "$HOME/.local/bin"
        "$HOME/.local/share"
        "$HOME/.cache"
    )
    mkdir -p "${dirs[@]}"
}

# Install or update Homebrew
setup_homebrew() {
    if ! command -v brew &>/dev/null; then
        info "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH for this session
        if [[ -d "/opt/homebrew" ]]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        else
            eval "$(/usr/local/bin/brew shellenv)"
        fi
        success "Homebrew installed"
    fi
    
    info "Updating Homebrew..."
    brew update
    
    info "Upgrading Homebrew packages..."
    brew upgrade
}

# Install packages from Brewfile
install_brew_packages() {
    local brewfile="$HOME/.config/homebrew/Brewfile"
    
    if [[ -f "$brewfile" ]]; then
        info "Installing packages from Brewfile..."
        brew bundle --file="$brewfile"
        success "Packages installed"
    else
        error "Brewfile not found. Run 'yadm alt' first."
        exit 1
    fi
}

# Main installation steps
setup_directories
setup_homebrew
install_brew_packages

# Setup mise version manager
setup_mise() {
    if command -v mise &>/dev/null; then
        info "Setting up mise..."
        export PATH="$HOME/.local/bin:$PATH"
        eval "$(mise activate bash)"
        
        # Trust config file
        mise trust "$HOME/.config/mise/config.toml" || true
        
        # Install all tools defined in config.toml
        info "Installing tools from mise config..."
        mise install || true
        
        success "mise configured"
    else
        warning "mise not found. Install it from https://mise.run"
    fi
}

# Install Python tools
setup_python_tools() {
    if command -v uv &>/dev/null; then
        info "Installing Python tools via uv..."
        uv tool install ruff@latest || true
        success "Python tools installed"
    fi
}

# Setup git-secrets
setup_git_secrets() {
    if command -v git-secrets &>/dev/null; then
        local template_dir="$HOME/.config/git/templates/git-secrets"
        mkdir -p "$template_dir"
        
        if [[ ! -f "$template_dir/hooks/commit-msg" ]]; then
            git secrets --install "$template_dir" >/dev/null 2>&1 || true
        fi
        
        git config --global init.templateDir "$template_dir"
        
        # Check if AWS patterns are already registered
        if ! git secrets --list 2>/dev/null | grep -q "AWS"; then
            git secrets --register-aws >/dev/null 2>&1 || true
        fi
        success "git-secrets configured"
    fi
}

# Setup GitHub CLI extensions
setup_gh_extensions() {
    if command -v gh &>/dev/null; then
        if ! gh extension list | grep -q "github/gh-copilot"; then
            gh extension install github/gh-copilot || true
        fi
    fi
}

# Setup Zsh with antidote
setup_zsh() {
    info "Setting up Zsh..."
    local antidote_dir="${ZDOTDIR:-$HOME}/.antidote"
    
    if [[ ! -d "$antidote_dir" ]]; then
        git clone --depth=1 https://github.com/mattmc3/antidote.git "$antidote_dir"
        success "antidote installed"
    fi
}

# Setup 1Password SSH integration
setup_1password_ssh() {
    info "Setting up 1Password SSH integration..."
    
    # Create SSH config directory if it doesn't exist
    mkdir -p "$HOME/.ssh"
    chmod 700 "$HOME/.ssh"
    
    # Check if 1Password is installed
    if command -v op >/dev/null 2>&1; then
        local ssh_config="$HOME/.ssh/config"
        
        # Check if 1Password SSH agent config already exists
        if ! grep -q "IdentityAgent.*1Password" "$ssh_config" 2>/dev/null; then
            info "Adding 1Password SSH agent to SSH config..."
            
            # Backup before modifying
            if [[ -f "$ssh_config" ]]; then
                cp "$ssh_config" "$ssh_config.backup"
            fi
            
            # macOS socket path
            local socket_path="~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"
            
            # Add 1Password SSH agent configuration
            cat >> "$ssh_config" <<EOF

# 1Password SSH Agent
Host *
    IdentityAgent "$socket_path"
EOF
            success "1Password SSH agent configuration added"
        else
            info "1Password SSH agent already configured"
        fi
        
        # Create 1Password config directory
        mkdir -p "$HOME/.config/op"
        
        # Create 1Password CLI config if not exists
        if [[ ! -f "$HOME/.config/op/config" ]]; then
            cat > "$HOME/.config/op/config" <<EOF
{
  "latest_signin": "",
  "device": "$(uuidgen || echo 'default-device')",
  "commands": {
    "biometric_unlock": true
  },
  "cache": {
    "session": {
      "ttl": 1800
    }
  }
}
EOF
            success "1Password CLI configuration created"
        fi
    else
        warning "1Password CLI (op) not found. Install from: https://developer.1password.com/docs/cli/get-started/"
    fi
}

# Set correct file permissions
set_permissions() {
    info "Setting correct permissions..."
    
    # SSH directory
    if [[ -d "$HOME/.ssh" ]]; then
        chmod 700 "$HOME/.ssh"
        find "$HOME/.ssh" -type f -name "id_*" ! -name "*.pub" -exec chmod 600 {} \;
        find "$HOME/.ssh" -type f -name "*.pub" -exec chmod 644 {} \;
        [[ -f "$HOME/.ssh/config" ]] && chmod 600 "$HOME/.ssh/config"
    fi
    
    # GPG directory
    if [[ -d "$HOME/.gnupg" ]]; then
        chmod 700 "$HOME/.gnupg"
        find "$HOME/.gnupg" -type f -exec chmod 600 {} \;
    fi
}

# Configure macOS settings
setup_macos_settings() {
    if [[ "${YADM_BOOTSTRAP_MACOS_SETTINGS:-true}" != "false" ]]; then
        info "Configuring macOS settings..."
        
        # Show hidden files in Finder
        defaults write com.apple.finder AppleShowAllFiles -bool true
        
        # Enable fast key repeat
        defaults write NSGlobalDomain KeyRepeat -int 2
        defaults write NSGlobalDomain InitialKeyRepeat -int 15
        
        # Disable press-and-hold for keys
        defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
        
        # Restart Finder to apply changes
        killall Finder || true
        success "macOS settings applied"
    fi
}

# Show installation summary
show_summary() {
    success "Bootstrap completed!"
    echo
    echo "Installed tools:"
    echo "  ✓ Homebrew packages (via Brewfile)"
    echo "  ✓ mise with all configured tools"
    echo "  ✓ uv and Python tools (ruff)"
    echo "  ✓ Development tools and Git configuration"
    echo "  ✓ Zsh with antidote"
    [[ "${YADM_BOOTSTRAP_MACOS_SETTINGS:-true}" != "false" ]] && echo "  ✓ macOS settings"
    echo
    echo "Configuration: class=$(yadm config local.class || echo "personal")"
    echo
    echo "Next steps:"
    echo "1. Restart your terminal"
    echo "2. Run 'exec zsh' to switch to Zsh"
    echo "3. If needed: chsh -s $(which zsh)"
}

# Run all setup functions
setup_mise
setup_python_tools

info "Setting up development tools..."
setup_git_secrets
setup_gh_extensions

setup_zsh
setup_1password_ssh
set_permissions
setup_macos_settings
show_summary