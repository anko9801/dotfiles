#!/usr/bin/env bash
# Bootstrap for macOS
set -euo pipefail

# Colors & Logging
readonly RED='\033[0;31m' GREEN='\033[0;32m' BLUE='\033[0;34m' YELLOW='\033[1;33m' NC='\033[0m'
info() { echo -e "${BLUE}==>${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }
warning() { echo -e "${YELLOW}!${NC} $1"; }

cleanup() {
    [[ $? -ne 0 ]] && echo -e "\nInstallation interrupted. You can safely run it again."
}
trap cleanup EXIT INT TERM

info "Running macOS bootstrap..."

setup_directories() {
    info "Creating directories..."
    mkdir -p "$HOME"/{.config,.local/{bin,share},.cache}
}

setup_homebrew() {
    if ! command -v brew &>/dev/null; then
        info "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        eval "$([[ -d "/opt/homebrew" ]] && echo /opt/homebrew || echo /usr/local)/bin/brew shellenv"
        success "Homebrew installed"
    fi
    info "Updating Homebrew..."
    brew update && brew upgrade
}

install_brew_packages() {
    local brewfile="$HOME/.config/homebrew/Brewfile"
    [[ -f "$brewfile" ]] || { error "Brewfile not found. Run 'yadm alt' first."; exit 1; }
    info "Installing packages from Brewfile..."
    brew bundle --file="$brewfile" && success "Packages installed"
}

# Main installation steps
setup_directories
setup_homebrew
install_brew_packages

setup_mise() {
    command -v mise &>/dev/null || { warning "mise not found"; return; }
    info "Setting up mise..."
    export PATH="$HOME/.local/bin:$PATH"
    eval "$(mise activate bash)"
    mise trust "$HOME/.config/mise/config.toml" || true
    info "Installing tools from mise config..."
    mise install || true
    success "mise configured"
}

setup_python_tools() {
    command -v uv &>/dev/null || return
    info "Installing Python tools via uv..."
    uv tool install ruff@latest || true
    success "Python tools installed"
}

setup_git_secrets() {
    command -v git-secrets &>/dev/null || return
    local template_dir="$HOME/.config/git/templates/git-secrets"
    mkdir -p "$template_dir"
    [[ -f "$template_dir/hooks/commit-msg" ]] || git secrets --install "$template_dir" &>/dev/null || true
    git config --global init.templateDir "$template_dir"
    git secrets --list 2>/dev/null | grep -q "AWS" || git secrets --register-aws &>/dev/null || true
    success "git-secrets configured"
}

setup_gh_extensions() {
    command -v gh &>/dev/null || return
    gh extension list | grep -q "github/gh-copilot" || gh extension install github/gh-copilot || true
}

setup_zsh() {
    info "Setting up Zsh..."
    local antidote_dir="${ZDOTDIR:-$HOME}/.antidote"
    [[ -d "$antidote_dir" ]] || git clone --depth=1 https://github.com/mattmc3/antidote.git "$antidote_dir"
    success "antidote installed"
}

# Setup 1Password SSH integration (simplified - configs are now in templates)
setup_1password_ssh() {
    info "Setting up 1Password SSH integration..."
    
    # Ensure SSH directory and config.d exist with correct permissions
    mkdir -p "$HOME/.ssh/config.d"
    chmod 700 "$HOME/.ssh"
    chmod 700 "$HOME/.ssh/config.d"
    
    # Add Include directive to SSH config if not present
    if [[ -f "$HOME/.ssh/config" ]]; then
        if ! grep -q "^Include ~/.ssh/config.d/\*" "$HOME/.ssh/config"; then
            # Add Include at the beginning of the file
            echo -e "# Added by yadm\nInclude ~/.ssh/config.d/*\n" | cat - "$HOME/.ssh/config" > "$HOME/.ssh/config.tmp"
            mv "$HOME/.ssh/config.tmp" "$HOME/.ssh/config"
            chmod 600 "$HOME/.ssh/config"
            success "Added Include directive to SSH config"
        fi
    else
        # Create minimal SSH config with Include
        echo -e "# SSH Configuration\n# Added by yadm\n\nInclude ~/.ssh/config.d/*\n" > "$HOME/.ssh/config"
        chmod 600 "$HOME/.ssh/config"
        success "Created SSH config with Include directive"
    fi
    
    # Check if 1Password CLI is available
    if command -v op >/dev/null 2>&1; then
        success "1Password CLI found"
    else
        warning "1Password CLI not found - install from https://developer.1password.com/docs/cli/"
    fi
}

# Set correct file permissions
set_permissions() {
    info "Setting correct permissions..."
    
    # SSH directory
    if [[ -d "$HOME/.ssh" ]]; then
        chmod 700 "$HOME/.ssh"
        find "$HOME/.ssh" -type f -name "id_*" ! -name "*.pub" -exec chmod 600 {} \;
        find "$HOME/.ssh" -type f -name "*.pub" -exec chmod 644 {} \;
        [[ -f "$HOME/.ssh/config" ]] && chmod 600 "$HOME/.ssh/config"
    fi
    
    # GPG directory
    if [[ -d "$HOME/.gnupg" ]]; then
        chmod 700 "$HOME/.gnupg"
        find "$HOME/.gnupg" -type f -exec chmod 600 {} \;
    fi
}

# Configure macOS settings
setup_macos_settings() {
    if [[ "${YADM_BOOTSTRAP_MACOS_SETTINGS:-true}" != "false" ]]; then
        info "Configuring macOS settings..."
        
        # Show hidden files in Finder
        defaults write com.apple.finder AppleShowAllFiles -bool true
        
        # Enable fast key repeat
        defaults write NSGlobalDomain KeyRepeat -int 2
        defaults write NSGlobalDomain InitialKeyRepeat -int 15
        
        # Disable press-and-hold for keys
        defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
        
        # Restart Finder to apply changes
        killall Finder || true
        success "macOS settings applied"
    fi
}

# Show installation summary
show_summary() {
    success "Bootstrap completed!"
    echo
    echo "Installed tools:"
    echo "  ✓ Homebrew packages (via Brewfile)"
    echo "  ✓ mise with all configured tools"
    echo "  ✓ uv and Python tools (ruff)"
    echo "  ✓ Development tools and Git configuration"
    echo "  ✓ Zsh with antidote"
    [[ "${YADM_BOOTSTRAP_MACOS_SETTINGS:-true}" != "false" ]] && echo "  ✓ macOS settings"
    echo
    echo "Configuration: class=$(yadm config local.class || echo "personal")"
    echo
    echo "Next steps:"
    echo "1. Restart your terminal"
    echo "2. Run 'exec zsh' to switch to Zsh"
    echo "3. If needed: chsh -s $(which zsh)"
}

# Run all setup functions
setup_mise
setup_python_tools

info "Setting up development tools..."
setup_git_secrets
setup_gh_extensions

setup_zsh
setup_1password_ssh
set_permissions
setup_macos_settings
show_summary