#!/usr/bin/env bash
# Simple idempotent bootstrap script
set -euo pipefail

# ============================================================================
# Constants
# ============================================================================

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly HOME="${HOME:-$(eval echo ~)}"

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m'

# Platform detection (more detailed)
case "$(uname -s)" in
    Darwin)
        readonly PLATFORM="darwin"
        readonly DISTRO="macos"
        ;;
    Linux)
        if [[ -f /proc/sys/fs/binfmt_misc/WSLInterop ]]; then
            readonly PLATFORM="wsl"
        else
            readonly PLATFORM="linux"
        fi
        
        # Detect Linux distribution
        if [[ -f /etc/os-release ]]; then
            . /etc/os-release
            readonly DISTRO="${ID:-unknown}"
        else
            readonly DISTRO="unknown"
        fi
        ;;
    MINGW*|CYGWIN*|MSYS*)
        readonly PLATFORM="windows"
        readonly DISTRO="windows"
        ;;
    *)
        readonly PLATFORM="unknown"
        readonly DISTRO="unknown"
        ;;
esac

# ============================================================================
# Logging
# ============================================================================

info() { echo -e "${BLUE}==>${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }
warning() { echo -e "${YELLOW}!${NC} $1"; }
show_header() { echo -e "\n$1\n${1//?/-}"; }

# ============================================================================
# YADM Configuration (Idempotent)
# ============================================================================

configure_yadm_class() {
    local current=$(yadm config local.class 2>/dev/null || echo "")
    
    if [[ -z "$current" ]]; then
        # Use environment variable if set
        if [[ -n "${YADM_CLASS:-}" ]]; then
            yadm config local.class "$YADM_CLASS"
            success "Set YADM class: $YADM_CLASS"
        else
            # Interactive selection
            echo "Select class: 1) personal  2) work  3) server"
            read -rp "[1-3]: " -n 1 && echo
            case "$REPLY" in
                1) yadm config local.class personal ;;
                2) yadm config local.class work ;;
                3) yadm config local.class server ;;
                *) warning "Using default class: personal"
                   yadm config local.class personal ;;
            esac
            success "Set YADM class"
        fi
    else
        success "YADM class already set: $current"
    fi
}

configure_yadm_hostname() {
    local current=$(yadm config local.hostname 2>/dev/null || echo "")
    
    if [[ -z "$current" ]]; then
        local system_hostname=$(hostname -s)
        yadm config local.hostname "$system_hostname"
        success "Set YADM hostname: $system_hostname"
    else
        success "YADM hostname already set: $current"
    fi
}

configure_yadm_auto_commit() {
    local current=$(yadm config yadm.auto-commit 2>/dev/null || echo "")
    
    if [[ -z "$current" ]]; then
        read -rp "Enable auto-commit? (y/N): " -n 1 && echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            yadm config yadm.auto-commit true
            yadm config yadm.auto-commit-msg "Auto update from $(hostname)"
            success "Auto-commit enabled"
        else
            success "Auto-commit disabled"
        fi
    else
        success "Auto-commit already configured: $current"
    fi
}

configure_git() {
    show_header "Git Configuration"
    
    # Email (idempotent)
    local email=$(git config --global user.email 2>/dev/null || echo "")
    if [[ -z "$email" ]]; then
        read -rp "Git email: " git_email
        if [[ -n "$git_email" ]]; then
            git config --global user.email "$git_email"
            success "Set Git email"
        fi
    else
        success "Git email: $email"
    fi
    
    # Name (idempotent)
    local name=$(git config --global user.name 2>/dev/null || echo "")
    if [[ -z "$name" ]]; then
        read -rp "Git name: " git_name
        if [[ -n "$git_name" ]]; then
            git config --global user.name "$git_name"
            success "Set Git name"
        fi
    else
        success "Git name: $name"
    fi
}

# ============================================================================
# Setup Functions (Idempotent)
# ============================================================================

setup_directories() {
    info "Creating directories..."
    
    local dirs=(
        "$HOME/.local/bin"
        "$HOME/.local/share"
        "$HOME/.config"
        "$HOME/.cache"
        "$HOME/.ssh"
        "$HOME/.ssh/config.d"
    )
    
    for dir in "${dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir"
            success "Created: $(basename "$dir")"
        fi
    done
    
    # Set permissions (idempotent)
    chmod 700 "$HOME/.ssh" "$HOME/.ssh/config.d" 2>/dev/null || true
    
    success "All directories ready"
}

setup_ssh_config() {
    info "Configuring SSH..."
    
    # Setup SSH config include (idempotent)
    if [[ ! -f "$HOME/.ssh/config" ]]; then
        echo "Include ~/.ssh/config.d/*" > "$HOME/.ssh/config"
        success "Created SSH config"
    elif ! grep -q "^Include ~/.ssh/config.d/\*" "$HOME/.ssh/config" 2>/dev/null; then
        echo -e "Include ~/.ssh/config.d/*\n" | cat - "$HOME/.ssh/config" > "$HOME/.ssh/config.tmp"
        mv "$HOME/.ssh/config.tmp" "$HOME/.ssh/config"
        success "Updated SSH config"
    else
        success "SSH config already configured"
    fi
    
    chmod 600 "$HOME/.ssh/config" 2>/dev/null || true
}

setup_mise() {
    info "Setting up mise..."
    
    # Install mise (idempotent)
    if ! command -v mise &>/dev/null; then
        info "Installing mise..."
        curl -fsSL https://mise.run | sh
        export PATH="$HOME/.local/bin:$PATH"
        success "Mise installed"
    else
        success "Mise already installed"
    fi
    
    # Activate mise
    eval "$(mise activate bash)" 2>/dev/null || true
    
    # Trust and install tools (idempotent)
    if [[ -f "$HOME/.config/mise/config.toml" ]]; then
        mise trust "$HOME/.config/mise/config.toml" 2>/dev/null || true
        info "Installing mise tools..."
        mise install --yes || warning "Some tools may have failed"
        success "Mise tools ready"
    fi
}

setup_deno() {
    info "Setting up deno..."
    
    # Install deno via mise (idempotent)
    mise install deno@latest
    mise use -g deno@latest
    success "Deno ready"
}

setup_platform_darwin() {
    # Xcode CLI tools (idempotent check)
    if ! xcode-select -p &>/dev/null; then
        warning "Xcode Command Line Tools not installed"
        info "To install: xcode-select --install"
    else
        success "Xcode CLI tools installed"
    fi
    
    # Homebrew (idempotent check)
    if ! command -v brew &>/dev/null; then
        warning "Homebrew not installed"
        info "To install: /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
    else
        success "Homebrew installed"
    fi
}

setup_platform_linux() {
    # Update package lists for apt-based systems
    if command -v apt-get &>/dev/null; then
        info "Updating package lists..."
        sudo apt-get update || warning "Failed to update package lists"
    fi
}

setup_platform_wsl() {
    setup_platform_linux
    
    # WSL-specific configuration
    if [[ ! -f /etc/wsl.conf ]]; then
        info "Creating WSL configuration..."
        sudo tee /etc/wsl.conf > /dev/null << 'EOF'
[interop]
enabled=true
appendWindowsPath=true

[automount]
enabled=true
options="metadata"
EOF
        success "WSL configured"
    else
        success "WSL already configured"
    fi
}

install_packages() {
    info "Installing packages..."
    
    if [[ -f "$SCRIPT_DIR/bundle.sh" ]] && command -v deno &>/dev/null; then
        "$SCRIPT_DIR/bundle.sh" install
        success "Packages installed"
    else
        warning "Bundle script or deno not available"
    fi
}

# ============================================================================
# Main
# ============================================================================

main() {
    echo "======================================"
    echo "        YADM Bootstrap"
    echo "        Platform: $PLATFORM"
    echo "        Distribution: $DISTRO"
    echo "======================================"
    
    # Skip configuration if YADM_BOOTSTRAP_SKIP_CONFIG is set
    if [[ -z "${YADM_BOOTSTRAP_SKIP_CONFIG:-}" ]]; then
        show_header "YADM Configuration"
        configure_yadm_class
        configure_yadm_hostname
        configure_yadm_auto_commit
        configure_git
    else
        info "Skipping configuration (YADM_BOOTSTRAP_SKIP_CONFIG set)"
    fi
    
    show_header "System Setup"
    setup_directories
    setup_ssh_config
    setup_mise
    setup_deno
    
    # Generate YADM alternates (idempotent)
    info "Generating configuration alternates..."
    yadm alt
    success "Alternates generated"
    
    # Platform-specific setup
    show_header "Platform Setup"
    case "$PLATFORM" in
        darwin) setup_platform_darwin ;;
        linux) setup_platform_linux ;;
        wsl) setup_platform_wsl ;;
    esac
    
    # Install packages
    show_header "Package Installation"
    install_packages
    
    echo
    echo "======================================"
    success "Bootstrap complete!"
    echo
    echo "Next steps:"
    echo "  1. Restart your terminal"
    
    # Platform-specific next steps
    if [[ "$PLATFORM" == "darwin" ]] && [[ "$(basename "$SHELL")" != "zsh" ]]; then
        echo "  2. Set Zsh as default: chsh -s \$(which zsh)"
    fi
    
    echo "======================================"
}

# ============================================================================
# Error Handling
# ============================================================================

cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        echo
        error "Bootstrap interrupted (exit code: $exit_code)"
        info "You can safely run the script again - all operations are idempotent"
    fi
}

trap cleanup EXIT

# ============================================================================
# Entry Point
# ============================================================================

# Parse arguments
for arg in "$@"; do
    case $arg in
        --help|-h)
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  --help     Show this help message"
            echo ""
            echo "Environment variables:"
            echo "  YADM_CLASS                    Set YADM class without prompting"
            echo "  YADM_BOOTSTRAP_SKIP_CONFIG   Skip all configuration prompts"
            echo ""
            echo "All operations are idempotent and can be run multiple times safely."
            exit 0
            ;;
    esac
done

# Run main
main "$@"