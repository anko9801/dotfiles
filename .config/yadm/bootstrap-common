#!/usr/bin/env bash

# Common functions for bootstrap scripts
# このファイルは各OS別のbootstrapからsourceされます

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

info() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }

# Check if command exists
command_exists() {
    command -v "$1" &> /dev/null
}

# Install mise
install_mise() {
    if ! command_exists mise; then
        info "Installing mise..."
        curl https://mise.run | sh
        success "mise installed"
    else
        info "mise already installed"
    fi
}

# Setup mise tools
setup_mise_tools() {
    if command_exists mise; then
        info "Setting up mise tools..."
        
        # Activate mise
        eval "$(mise activate zsh)"
        
        # Install common tools
        mise install node@lts
        mise install python@latest
        mise install ruby@latest
        mise install go@latest
        mise install rust@latest
        
        # Set as global
        mise use -g node@lts
        mise use -g python@latest
        mise use -g ruby@latest
        mise use -g go@latest
        mise use -g rust@latest
        
        success "mise tools configured"
    fi
}

# Setup npm global packages
setup_npm_packages() {
    # npm packages are now managed by mise
    info "npm packages are managed by mise - see .config/mise/config.toml"
}

# Setup Vim
setup_vim() {
    # Create vim directories
    mkdir -p "$HOME/.config/vim"
    mkdir -p "$HOME/.local/share/vim/dein"
    
    if [[ ! -d "$HOME/.local/share/vim/dein" ]]; then
        info "Installing dein.vim..."
        curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > /tmp/installer.sh
        sh /tmp/installer.sh ~/.local/share/vim/dein
        rm /tmp/installer.sh
        success "dein.vim installed"
    fi
}

# Setup Zsh
setup_zsh() {
    # Create zsh directories
    mkdir -p "$HOME/.config/zsh"
    mkdir -p "$HOME/.local/share/zsh"
    
    # Install zinit (to XDG location)
    if [[ ! -d "$HOME/.local/share/zsh/zinit" ]]; then
        info "Installing zinit..."
        mkdir -p ~/.local/share/zsh
        git clone https://github.com/zdharma-continuum/zinit.git ~/.local/share/zsh/zinit/bin
        success "zinit installed"
    fi
    
    # Set as default shell if requested
    if [[ "${YADM_SHELL:-}" == "zsh" ]] && command_exists zsh; then
        info "Setting zsh as default shell..."
        chsh -s $(which zsh)
    fi
}

# Clone repositories
clone_repos() {
    local repos_dir="$HOME/repos"
    mkdir -p "$repos_dir"
    
    # Add any common repositories to clone here
}

# Create XDG directories
create_xdg_dirs() {
    info "Creating XDG directories..."
    mkdir -p "$HOME/.config"
    mkdir -p "$HOME/.local/bin"
    mkdir -p "$HOME/.local/share"
    mkdir -p "$HOME/.local/state"
    mkdir -p "$HOME/.cache"
}

# Post install message
post_install() {
    success "Bootstrap completed!"
    echo
    echo "Next steps:"
    echo "1. Restart your shell or run: source ~/.zshenv && source $ZDOTDIR/.zshrc"
    echo "2. Check yadm status: yadm status"
    echo
    info "パパッと楽に理想の環境を手に入れました！"
}