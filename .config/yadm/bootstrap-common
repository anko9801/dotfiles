#!/usr/bin/env bash

# Common functions for bootstrap scripts
# Used by OS-specific bootstrap scripts

# Get yadm class
get_yadm_class() {
    yadm config local.class || echo "personal"
}

# Enable strict error handling
set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Logging functions
info() { echo -e "${BLUE}[INFO]${NC} $1" | tee -a "${BOOTSTRAP_LOG:-/dev/null}"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a "${BOOTSTRAP_LOG:-/dev/null}"; }
error() { echo -e "${RED}[ERROR]${NC} $1" | tee -a "${BOOTSTRAP_LOG:-/dev/null}" >&2; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "${BOOTSTRAP_LOG:-/dev/null}"; }

# Progress tracking
BOOTSTRAP_STEPS_TOTAL=0
BOOTSTRAP_STEPS_DONE=0

start_progress() {
    BOOTSTRAP_STEPS_TOTAL="$1"
    BOOTSTRAP_STEPS_DONE=0
    info "Starting bootstrap with $BOOTSTRAP_STEPS_TOTAL steps"
}

step_done() {
    ((BOOTSTRAP_STEPS_DONE++))
    local percent=$((BOOTSTRAP_STEPS_DONE * 100 / BOOTSTRAP_STEPS_TOTAL))
    info "Progress: [$BOOTSTRAP_STEPS_DONE/$BOOTSTRAP_STEPS_TOTAL] ${percent}%"
}

# Check if command exists
command_exists() {
    command -v "$1" &> /dev/null
}

# Run command with retry
retry() {
    local max_attempts="${1:-3}"
    local delay="${2:-1}"
    local command="${@:3}"
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        if eval "$command"; then
            return 0
        fi
        
        if [[ $attempt -lt $max_attempts ]]; then
            warning "Command failed, retrying in ${delay}s... (attempt $attempt/$max_attempts)"
            sleep "$delay"
        fi
        
        ((attempt++))
    done
    
    error "Command failed after $max_attempts attempts: $command"
    return 1
}

# Check internet connectivity
check_internet() {
    if ! curl -s --head --connect-timeout 5 https://github.com > /dev/null; then
        error "No internet connection detected"
        return 1
    fi
    return 0
}

# Create backup of file
backup_file() {
    local file="$1"
    if [[ -f "$file" ]]; then
        local backup="${file}.backup.$(date +%Y%m%d_%H%M%S)"
        cp "$file" "$backup"
        info "Backed up $file to $backup"
    fi
}

# Safe symlink creation
safe_symlink() {
    local source="$1"
    local target="$2"
    
    if [[ -e "$target" ]] && [[ ! -L "$target" ]]; then
        backup_file "$target"
        rm -f "$target"
    fi
    
    ln -sf "$source" "$target"
    info "Created symlink: $target -> $source"
}

# Install mise
install_mise() {
    if ! command_exists mise; then
        info "Installing mise..."
        curl https://mise.run | sh
        
        # Add to current session
        export PATH="$HOME/.local/bin:$PATH"
        eval "$(~/.local/bin/mise activate bash)"
        
        success "mise installed"
    else
        info "mise already installed"
    fi
}

# Setup mise tools
setup_mise_tools() {
    if command_exists mise; then
        info "Setting up mise tools..."
        
        # Activate mise
        eval "$(mise activate zsh)"
        
        # Install common tools
        mise install node@lts
        mise install python@latest
        mise install ruby@latest
        mise install go@latest
        mise install rust@latest
        
        # Set as global
        mise use -g node@lts
        mise use -g python@latest
        mise use -g ruby@latest
        mise use -g go@latest
        mise use -g rust@latest
        
        success "mise tools configured"
    fi
}

# Setup npm global packages
setup_npm_packages() {
    if ! command_exists npm; then
        warning "npm not found - skipping npm packages"
        return
    fi
    
    info "Installing global npm packages..."
    
    # Base packages
    local packages=("aicommits")
    
    # Add class-specific packages
    local class=$(get_yadm_class)
    case "$class" in
        work)
            packages+=("npm-check-updates" "license-checker")
            ;;
        personal)
            packages+=("gatsby-cli" "create-react-app")
            ;;
    esac
    
    for pkg in "${packages[@]}"; do
        npm install -g "$pkg" || warning "Failed to install $pkg"
    done
}

# Setup system-wide ZDOTDIR (requires sudo)
setup_system_zdotdir() {
    info "Setting up system-wide ZDOTDIR configuration..."
    
    local system_zshenv="/etc/zsh/zshenv"
    local zdotdir_line='export ZDOTDIR="$HOME/.config/zsh"'
    
    # Check if already configured
    if [[ -f "$system_zshenv" ]] && grep -q "ZDOTDIR" "$system_zshenv"; then
        info "ZDOTDIR already configured in $system_zshenv"
        return 0
    fi
    
    # Ask for confirmation
    warning "This requires sudo access to modify $system_zshenv"
    echo "Do you want to add ZDOTDIR to system configuration? (y/N)"
    read -r response
    
    if [[ "$response" =~ ^[Yy]$ ]]; then
        # Create /etc/zsh directory if it doesn't exist
        [[ ! -d "/etc/zsh" ]] && sudo mkdir -p /etc/zsh
        
        # Add ZDOTDIR configuration
        echo "$zdotdir_line" | sudo tee -a "$system_zshenv" > /dev/null
        
        # Remove .zshenv from home if it exists
        [[ -f "$HOME/.zshenv" ]] && rm -f "$HOME/.zshenv"
        
        success "System-wide ZDOTDIR configured (no .zshenv needed!)"
    else
        info "Skipping system configuration. Using .zshenv instead."
    fi
}

# Setup development environment
setup_development_environment() {
    info "Setting up development environment..."
    
    # Create vim directories
    mkdir -p "$HOME/.config/vim"
    mkdir -p "$HOME/.local/share/vim/dein"
    
    # Install vim plugin manager
    if [[ ! -d "$HOME/.local/share/vim/dein" ]]; then
        info "Installing dein.vim..."
        curl https://raw.githubusercontent.com/Shougo/dein.vim/master/bin/installer.sh > /tmp/installer.sh
        sh /tmp/installer.sh ~/.local/share/vim/dein
        rm /tmp/installer.sh
        success "dein.vim installed"
    fi
    
    # Setup git
    setup_git_config
    
    # Setup AI tools
    setup_ai_tools
}

# Setup Zsh
setup_zsh() {
    # Create zsh directories
    mkdir -p "$HOME/.config/zsh"
    mkdir -p "$HOME/.local/share/zsh"
    
    # Install zinit (to XDG location)
    if [[ ! -d "$HOME/.local/share/zsh/zinit" ]]; then
        info "Installing zinit..."
        mkdir -p ~/.local/share/zsh
        git clone https://github.com/zdharma-continuum/zinit.git ~/.local/share/zsh/zinit/bin
        success "zinit installed"
    fi
    
    # Set as default shell if requested
    if [[ "${YADM_SHELL:-}" == "zsh" ]] && command_exists zsh; then
        info "Setting zsh as default shell..."
        chsh -s $(which zsh)
    fi
}

# Clone repositories
clone_repos() {
    local repos_dir="$HOME/repos"
    mkdir -p "$repos_dir"
    
    # Add any common repositories to clone here
}

# Create XDG directories
create_xdg_dirs() {
    info "Creating XDG directories..."
    mkdir -p "$HOME/.config"
    mkdir -p "$HOME/.local/bin"
    mkdir -p "$HOME/.local/share"
    mkdir -p "$HOME/.local/state"
    mkdir -p "$HOME/.cache"
}

# Setup git configuration
setup_git_config() {
    info "Setting up git configuration..."
    
    # Git secrets
    if command_exists git-secrets; then
        mkdir -p ~/.config/git/templates/git-secrets
        git secrets --install ~/.config/git/templates/git-secrets >/dev/null 2>&1
        git config --global init.templateDir ~/.config/git/templates/git-secrets
        git secrets --register-aws >/dev/null 2>&1
        success "git-secrets configured"
    fi
}

# Setup AI tools
setup_ai_tools() {
    info "Setting up AI development tools..."
    
    # GitHub Copilot CLI
    if command_exists gh; then
        if ! gh extension list | grep -q "github/gh-copilot"; then
            gh extension install github/gh-copilot || warning "Failed to install GitHub Copilot CLI"
        fi
    fi
    
    # Setup npm packages
    setup_npm_packages
}

# Post install message
post_install() {
    success "Bootstrap completed!"
    
    local class=$(get_yadm_class)
    echo
    echo "================================"
    echo "  Bootstrap Summary"
    echo "  Class: $class"
    echo "  OS: $(uname -s)"
    echo "================================"
    echo
    
    # Show installed tools
    echo "Checking installed tools:"
    local tools=("git" "zsh" "tmux" "mise" "rg" "fd" "bat" "fzf")
    for tool in "${tools[@]}"; do
        if command_exists "$tool"; then
            echo "  ✓ $tool"
        else
            echo "  ✗ $tool (not installed)"
        fi
    done
    
    echo
    echo "Next steps:"
    echo "1. Restart your shell: exec zsh"
    echo "2. Run: yadm alt   # Generate alternates"
    echo "3. Run: yadm encrypt   # Encrypt sensitive files"
    echo
    info "パパッと楽に理想の環境を手に入れました！"
    
    # Save completion
    echo "Bootstrap completed at: $(date)" >> "${BOOTSTRAP_LOG:-/dev/null}"
}