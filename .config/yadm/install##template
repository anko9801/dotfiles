#!/usr/bin/env bash
# Bootstrap installation script
set -euo pipefail


# Script options
VERBOSE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --verbose|-v)
            VERBOSE=true
            shift
            ;;
        --help|-h)
            echo "Usage: $0 [options]"
            echo "Options:"
            echo "  --verbose, -v   Show detailed output"
            echo "  --help, -h      Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# ============================================================================
# Constants & Utilities
# ============================================================================

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly HOME="${HOME:-$(eval echo ~)}"

# Colors
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m'

# Logging
info() { echo -e "${BLUE}==>${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }
warning() { echo -e "${YELLOW}!${NC} $1"; }
verbose() { [[ "$VERBOSE" == "true" ]] && echo -e "${BLUE}[VERBOSE]${NC} $1"; }

# Cleanup on exit
cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        echo -e "\nBootstrap interrupted. You can safely run it again."
    fi
}
trap cleanup EXIT INT TERM

# ============================================================================
# Core Setup Functions
# ============================================================================

setup_directories() {
    info "Creating directory structure..."
    mkdir -p \
        "$HOME/.config" \
        "$HOME/.local/bin" \
        "$HOME/.local/share" \
        "$HOME/.cache" \
        "$HOME/.ssh/config.d" \
        "$HOME/.config/git/hooks" \
        "$HOME/.claude"
    
    # Set permissions
    chmod 700 "$HOME/.ssh" "$HOME/.ssh/config.d" 2>/dev/null || true
    
    # Create symlink for Claude commands
    if [[ -d "$HOME/.config/claude/commands" && ! -L "$HOME/.claude/commands" ]]; then
        info "Setting up Claude commands symlink..."
        ln -sf "$HOME/.config/claude/commands" "$HOME/.claude/commands"
    fi
}

setup_package_manager() {
{% if yadm.os == "Darwin" %}
    if ! command -v brew &>/dev/null; then
        info "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        eval "$([[ -d "/opt/homebrew" ]] && echo /opt/homebrew || echo /usr/local)/bin/brew shellenv"
    fi
    brew update
{% endif %}
{% if yadm.os == "Windows" %}
    # Check if winget is available
    if ! command -v winget &>/dev/null; then
        error "winget not found. Please install App Installer from Microsoft Store"
        error "https://www.microsoft.com/store/productId/9NBLGGH4NNS1"
        exit 1
    fi
    info "Updating winget sources..."
    winget source update
{% endif %}
{% if yadm.os == "Linux" or yadm.os == "WSL" %}
    # Detect Linux distribution
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        DISTRO="${ID,,}"
    else
        DISTRO="unknown"
    fi
    info "Detected distribution: $DISTRO"
    
    case "$DISTRO" in
        ubuntu|debian) sudo apt-get update || true ;;
        arch|manjaro) sudo pacman -Syu --noconfirm ;;
        fedora) sudo dnf update -y ;;
    esac
{% endif %}
    # Fallback for unknown OS
    :
}

install_packages() {
{% if yadm.os == "Darwin" %}
    local brewfile="$HOME/.config/homebrew/Brewfile"
    if [[ ! -f "$brewfile" ]]; then
        error "Brewfile not found. Run 'yadm alt' first."
        exit 1
    fi
    info "Installing packages from Brewfile..."
    brew bundle --file="$brewfile"
{% endif %}
{% if yadm.os == "Windows" %}
    info "Installing packages via winget..."
    
    # Core packages available on Windows
    local packages=(
        "Git.Git"
        "Microsoft.PowerShell"
        "Microsoft.VisualStudioCode"
        "GitHub.cli"
        "BurntSushi.ripgrep.MSVC"
        "sharkdp.fd"
        "sharkdp.bat"
        "dandavison.delta"
        "junegunn.fzf"
        "Neovim.Neovim"
        "eza-community.eza"
        "ajeetdsouza.zoxide"
        "ellie.atuin"
        "cantino.mcfly"
        "muesli.duf"
        "bootandy.dust"
        "XAMPPRocky.Tokei"
        "chmln.sd"
        "Starship.Starship"
        "AgileBits.1Password.CLI"
        "extrawurst.gitui"
    )
    
    for package in "${packages[@]}"; do
        winget install --id "$package" --accept-package-agreements --accept-source-agreements || warning "Failed to install $package"
    done
    
    # Install mise via PowerShell
    if ! command -v mise &>/dev/null; then
        info "Installing mise..."
        powershell -NoProfile -ExecutionPolicy Bypass -Command "irm https://mise.run | iex"
    fi
{% endif %}
{% if yadm.os == "Linux" or yadm.os == "WSL" %}
    info "Installing base packages..."
    
    # Common packages
    local packages=(
        git curl wget tmux tree jq zsh neovim fzf
    )
    
    # Platform-specific packages
    case "${DISTRO:-}" in
        ubuntu|debian)
            packages+=(build-essential software-properties-common)
            sudo apt install -y "${packages[@]}"
            install_modern_tools_debian
            ;;
        arch|manjaro)
            packages+=(base-devel yq ripgrep fd bat gh eza starship zoxide atuin mcfly git-delta duf dust tokei sd sheldon)
            sudo pacman -S --needed --noconfirm "${packages[@]}"
            ;;
        fedora)
            packages+=(@development-tools ripgrep fd-find bat gh git-delta)
            sudo dnf install -y "${packages[@]}"
            install_modern_tools_fedora
            ;;
        *)
            warning "Unknown distribution, skipping package installation"
            ;;
    esac
{% endif %}
}

# ============================================================================
# Tool Setup Functions
# ============================================================================

# Helper function for downloading .deb files
install_deb_from_github() {
    local repo="$1" name="$2" pattern="$3" type="${4:-deb}"
    command -v "$name" &>/dev/null && return 0
    local version=$(curl -s "https://api.github.com/repos/$repo/releases/latest" | grep -Po '"tag_name": "\K[^"]*')
    local url=$(printf "$pattern" "$version" "$version")
    
    case "$type" in
        deb)
            curl -LO "$url" && sudo dpkg -i *.deb || sudo apt-get install -f -y
            rm -f *.deb
            ;;
        tar)
            curl -sL "$url" | tar -xz -C "$HOME/.local/bin" "$name" 2>/dev/null || warning "Failed to install $name"
            ;;
        zip)
            curl -sLO "$url" && unzip -j -o "$name*.zip" "$name" -d "$HOME/.local/bin" && chmod +x "$HOME/.local/bin/$name"
            rm -f "$name*.zip"
            ;;
    esac
}

setup_mise() {
    if command -v mise &>/dev/null; then
        success "mise already installed"
        return 0
    fi
    
{% if yadm.os == "Windows" %}
    # mise should already be installed via winget in install_packages
    if ! command -v mise &>/dev/null; then
        error "mise installation failed"
        return 1
    fi
{% else %}
    info "Installing mise..."
    curl https://mise.run | sh
    export PATH="$HOME/.local/bin:$PATH"
    
    if ! command -v mise &>/dev/null; then
        error "Failed to install mise"
        exit 1
    fi
{% endif %}
    
    info "Configuring mise..."
    eval "$(mise activate bash)"
    
    # Update mise to avoid version filter warnings
    info "Updating mise to latest version..."
    mise self-update -y || warning "Failed to update mise"
    
    mise trust "$HOME/.config/mise/config.toml" 2>/dev/null || true
    mise install --yes || warning "Some mise tools failed to install"
    success "mise configured"
}

setup_git_config() {
    info "Configuring Git..."
    
    # Ensure hooks directory exists
    mkdir -p "$HOME/.config/git/hooks"
    
    # Make hooks executable
    find "$HOME/.config/git/hooks" -type f -exec chmod +x {} \;
    
    # Skip gitleaks installation if already available
    command -v gitleaks &>/dev/null && return 0
    
{% if yadm.os == "Windows" %}
    info "Installing gitleaks..."
    winget install --id Gitleaks.Gitleaks --accept-package-agreements --accept-source-agreements || warning "Failed to install gitleaks"
{% else %}
    info "Installing gitleaks..."
    local gitleaks_version=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | grep -Po '"tag_name": "v\K[^"]*')
    local gitleaks_url="https://github.com/gitleaks/gitleaks/releases/download/v${gitleaks_version}/gitleaks_${gitleaks_version}_linux_x64.tar.gz"
    
    [[ "$(uname)" == "Darwin" ]] && gitleaks_url="https://github.com/gitleaks/gitleaks/releases/download/v${gitleaks_version}/gitleaks_${gitleaks_version}_darwin_arm64.tar.gz"
    
    curl -sL "$gitleaks_url" | tar -xz -C "$HOME/.local/bin" gitleaks 2>/dev/null || warning "Failed to install gitleaks"
{% endif %}
}

# Install Git-related tools
install_git_tools() {
    info "Installing Git tools..."
    
    # Install gitui
    if ! command -v gitui &>/dev/null; then
{% if yadm.os == "Windows" %}
        winget install --id extrawurst.gitui --accept-package-agreements --accept-source-agreements || warning "Failed to install gitui"
{% else %}
        info "Installing gitui..."
        install_deb_from_github "extrawurst/gitui" "gitui" "https://github.com/extrawurst/gitui/releases/download/%s/gitui-linux-musl.tar.gz" "tar"
{% endif %}
    fi
    
    # Install ghq
    if ! command -v ghq &>/dev/null; then
        info "Installing ghq..."
{% if yadm.os == "Windows" %}
        scoop install ghq || warning "Failed to install ghq"
{% else %}
        install_deb_from_github "x-motemen/ghq" "ghq" "https://github.com/x-motemen/ghq/releases/download/%s/ghq_linux_amd64.zip" "zip"
{% endif %}
    fi
    
    # Install gibo
    if ! command -v gibo &>/dev/null; then
        info "Installing gibo..."
        curl -L https://raw.githubusercontent.com/simonwhitaker/gibo/main/gibo -o "$HOME/.local/bin/gibo" && \
        chmod +x "$HOME/.local/bin/gibo" || warning "Failed to install gibo"
    fi
}

setup_shell() {
    info "Setting up shell environment..."
    
{% if yadm.os != "Windows" %}
    # Sheldon is installed via package managers (Homebrew/apt/etc)
    # Just ensure the Zsh plugin directory exists
    mkdir -p "$HOME/.config/zsh/plugins"
    
    # Clean up old antidote if it exists
    local antidote_dir="${ZDOTDIR:-$HOME}/.antidote"
    if [[ -d "$antidote_dir" ]]; then
        info "Removing old antidote installation..."
        rm -rf "$antidote_dir"
    fi
    
    # Install TPM (Tmux Plugin Manager)
    local tpm_dir="$HOME/.tmux/plugins/tpm"
    if [[ ! -d "$tpm_dir" ]]; then
        info "Installing Tmux Plugin Manager..."
        git clone https://github.com/tmux-plugins/tpm "$tpm_dir"
    fi
{% endif %}
    
    # SSH config - early return if already configured
    if [[ -f "$HOME/.ssh/config" ]] && grep -q "^Include ~/.ssh/config.d/\*" "$HOME/.ssh/config" 2>/dev/null; then
        chmod 600 "$HOME/.ssh/config" 2>/dev/null || true
        return 0
    fi
    
    # Add include directive
    if [[ -f "$HOME/.ssh/config" ]]; then
        echo -e "Include ~/.ssh/config.d/*\n" | cat - "$HOME/.ssh/config" > "$HOME/.ssh/config.tmp"
        mv "$HOME/.ssh/config.tmp" "$HOME/.ssh/config"
    else
        echo -e "Include ~/.ssh/config.d/*\n" > "$HOME/.ssh/config"
    fi
    chmod 600 "$HOME/.ssh/config" 2>/dev/null || true
}

setup_1password() {
    command -v op &>/dev/null || return 0
    info "Configuring 1Password integration..."
    
    # Fix config permissions if needed
    if [[ -f "$HOME/.config/op/config" ]]; then
        chmod 600 "$HOME/.config/op/config" || warning "Failed to fix op config permissions"
    fi
    
    # Initialize plugins
    [[ -f "$HOME/.config/op/plugins.sh" ]] && bash "$HOME/.config/op/plugins.sh" || true
}

setup_python_tools() {
    command -v uv &>/dev/null || return 0
    info "Installing Python tools..."
    uv tool install ruff@latest || true
}

setup_gh_extensions() {
    command -v gh &>/dev/null || return 0
    command -v op &>/dev/null || return 0
    
    op plugin run -- gh extension list | grep -q "github/gh-copilot" && return 0
    op plugin run -- gh extension install github/gh-copilot || true
}

setup_macos_settings() {
    # Skip if not on macOS
    [[ "$(uname)" != "Darwin" ]] && return 0
    [[ "${YADM_BOOTSTRAP_MACOS_SETTINGS:-true}" != "true" ]] && return 0
    
    info "Applying macOS settings..."
    
    # Show hidden files in Finder
    defaults write com.apple.finder AppleShowAllFiles -bool true
    
    # Enable fast key repeat
    defaults write NSGlobalDomain KeyRepeat -int 2
    defaults write NSGlobalDomain InitialKeyRepeat -int 15
    
    # Disable press-and-hold for keys
    defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
    
    # Restart Finder to apply changes
    killall Finder 2>/dev/null || true
    
    success "macOS settings applied"
}
setup_wsl_integration() {
    # Skip if not in WSL
    [[ ! -f /proc/sys/fs/binfmt_misc/WSLInterop ]] && return 0
    
    info "Configuring WSL integration..."
    
    # Windows interop settings
    if [[ -f /etc/wsl.conf ]] && grep -q "\[interop\]" /etc/wsl.conf; then
        verbose "WSL interop already configured"
    else
        if [[ -f /etc/wsl.conf ]]; then
            echo -e "\n[interop]\nappendWindowsPath = false" | sudo tee -a /etc/wsl.conf
        else
            echo -e "[interop]\nappendWindowsPath = false" | sudo tee /etc/wsl.conf
        fi
        info "Disabled Windows PATH pollution"
    fi
    
    # Create Windows home symlink if it doesn't exist
    if [[ ! -e "$HOME/winhome" ]] && command -v wslpath &>/dev/null; then
        WINHOME=$(wslpath "$(cmd.exe /c 'echo %USERPROFILE%' 2>/dev/null | tr -d '\r')")
        [[ -d "$WINHOME" ]] && ln -s "$WINHOME" "$HOME/winhome" && success "Created Windows home symlink"
    fi
    
    # WSL-specific Git config
    git config --global core.autocrlf input
    git config --global core.filemode false
}

install_modern_tools_debian() {
    info "Installing modern CLI tools..."
    local tmp_dir=$(mktemp -d)
    cd "$tmp_dir"
    
    install_deb_from_github "BurntSushi/ripgrep" "rg" "https://github.com/BurntSushi/ripgrep/releases/download/%s/ripgrep_%s-1_amd64.deb"
    install_deb_from_github "sharkdp/fd" "fd" "https://github.com/sharkdp/fd/releases/download/v%s/fd_%s_amd64.deb"
    install_deb_from_github "sharkdp/bat" "bat" "https://github.com/sharkdp/bat/releases/download/v%s/bat_%s_amd64.deb"
    install_deb_from_github "dandavison/delta" "delta" "https://github.com/dandavison/delta/releases/download/%s/git-delta_%s_amd64.deb"
    install_deb_from_github "eza-community/eza" "eza" "https://github.com/eza-community/eza/releases/download/v%s/eza_amd64.deb"
    install_deb_from_github "muesli/duf" "duf" "https://github.com/muesli/duf/releases/download/v%s/duf_%s_linux_amd64.deb"
    install_deb_from_github "bootandy/dust" "dust" "https://github.com/bootandy/dust/releases/download/v%s/dust-v%s-x86_64-unknown-linux-gnu.tar.gz" "tar"
    install_deb_from_github "XAMPPRocky/tokei" "tokei" "https://github.com/XAMPPRocky/tokei/releases/download/v%s/tokei-x86_64-unknown-linux-gnu.tar.gz" "tar"
    install_deb_from_github "chmln/sd" "sd" "https://github.com/chmln/sd/releases/download/v%s/sd-v%s-x86_64-unknown-linux-gnu" "tar"
    
    cd - >/dev/null
    rm -rf "$tmp_dir"
    
    # Install from scripts
    command -v starship &>/dev/null || curl -sS https://starship.rs/install.sh | sh -s -- -y
    command -v atuin &>/dev/null || bash <(curl --proto '=https' --tlsv1.2 -sSf https://setup.atuin.sh)
    command -v mcfly &>/dev/null || curl -LSfs https://raw.githubusercontent.com/cantino/mcfly/master/ci/install.sh | sh -s -- --git cantino/mcfly
    
    # Sheldon
    if ! command -v sheldon &>/dev/null; then
        info "Installing sheldon..."
        curl --proto '=https' -fLsS https://rossmacarthur.github.io/install/crate.sh | bash -s -- --repo rossmacarthur/sheldon --to ~/.local/bin
    fi
    
    # GitHub CLI
    if ! command -v gh &>/dev/null; then
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install -y gh
    fi
    
    # 1Password CLI
    if ! command -v op &>/dev/null; then
        info "Installing 1Password CLI..."
        curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/$(dpkg --print-architecture) stable main" | sudo tee /etc/apt/sources.list.d/1password.list
        sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
        curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
        sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
        curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg
        sudo apt update && sudo apt install -y 1password-cli
    fi
}

install_modern_tools_fedora() {
    # COPR repositories
    command -v eza &>/dev/null || (sudo dnf copr enable -y atim/eza && sudo dnf install -y eza)
    command -v zoxide &>/dev/null || (sudo dnf copr enable -y atim/zoxide && sudo dnf install -y zoxide)
    
    # Install scripts
    command -v starship &>/dev/null || curl -sS https://starship.rs/install.sh | sh -s -- -y
    command -v atuin &>/dev/null || bash <(curl --proto '=https' --tlsv1.2 -sSf https://setup.atuin.sh)
    command -v mcfly &>/dev/null || curl -LSfs https://raw.githubusercontent.com/cantino/mcfly/master/ci/install.sh | sh -s -- --git cantino/mcfly
    
    # Sheldon - install via dnf
    if ! command -v sheldon &>/dev/null; then
        info "Installing sheldon..."
        sudo dnf install -y sheldon || {
            # Fallback to cargo if dnf fails
            warning "sheldon not available in dnf, installing via cargo..."
            curl --proto '=https' -fLsS https://rossmacarthur.github.io/install/crate.sh | bash -s -- --repo rossmacarthur/sheldon --to ~/.local/bin
        }
    fi
    
    # 1Password CLI - Fedora
    if ! command -v op &>/dev/null; then
        info "Installing 1Password CLI..."
        sudo rpm --import https://downloads.1password.com/linux/keys/1password.asc
        sudo sh -c 'echo -e "[1password]\nname=1Password Stable Channel\nbaseurl=https://downloads.1password.com/linux/rpm/stable/\$basearch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=\"https://downloads.1password.com/linux/keys/1password.asc\"" > /etc/yum.repos.d/1password.repo'
        sudo dnf install -y 1password-cli
    fi
}

# ============================================================================
# System ZDOTDIR Setup
# ============================================================================

setup_system_zdotdir() {
    info "Setting up system-wide ZDOTDIR..."
    
    # Determine the correct zshenv path based on OS
{% if yadm.os == "Darwin" %}
    local zshenv_file="/etc/zshenv"
{% else %}
    local zshenv_file="/etc/zsh/zshenv"
{% endif %}
    
    # Check if already configured
    if sudo grep -q "ZDOTDIR=" "$zshenv_file" 2>/dev/null; then
        success "ZDOTDIR already configured in $zshenv_file"
        return
    fi
    
    # Ask for confirmation
    echo "This will configure system-wide ZDOTDIR in $zshenv_file (requires sudo)"
    read -rp "Continue? (y/N): " -n 1 && echo
    [[ ! $REPLY =~ ^[Yy]$ ]] && { info "Skipping ZDOTDIR setup"; return; }
    
    # Create directory if needed (Linux only)
{% if yadm.os != "Darwin" %}
    [[ ! -d "/etc/zsh" ]] && sudo mkdir -p /etc/zsh
{% endif %}
    
    # Add ZDOTDIR configuration
    echo 'export ZDOTDIR="$HOME/.config/zsh"' | sudo tee -a "$zshenv_file" >/dev/null
    success "Added ZDOTDIR to $zshenv_file"
}

# ============================================================================
# Summary
# ============================================================================

finish_bootstrap() {
    success "Bootstrap completed!"
    echo
    echo "Please restart your terminal to apply all changes."
{% if yadm.os != "Windows" %}
    [[ "$(basename "$SHELL")" != "zsh" ]] && echo "Run 'chsh -s $(which zsh)' to set Zsh as your default shell." || true
{% endif %}
    return 0
}

# ============================================================================
# Main
# ============================================================================

main() {
{% if yadm.os == "Darwin" %}
    info "Running macOS bootstrap..."
{% endif %}
{% if yadm.os == "Windows" %}
    info "Running Windows bootstrap..."
{% endif %}
{% if yadm.os == "WSL" %}
    info "Running Linux bootstrap (via WSL)..."
{% endif %}
{% if yadm.os == "Linux" %}
    info "Running Linux bootstrap..."
{% endif %}
    
    setup_directories
    setup_system_zdotdir
    setup_package_manager
    install_packages
    setup_git_config
    install_git_tools
    setup_shell
    setup_mise
    setup_python_tools
    setup_1password
    setup_gh_extensions
    setup_macos_settings
    setup_wsl_integration
    
    finish_bootstrap
}

main "$@"
exit 0

