#!/usr/bin/env bash
# Bootstrap installation script for dotfiles
set -euo pipefail

# ============================================================================
# Configuration
# ============================================================================

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly HOME="${HOME:-$(eval echo ~)}"

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m'

# ============================================================================
# Utility Functions
# ============================================================================

info() { echo -e "${BLUE}==>${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }
warning() { echo -e "${YELLOW}!${NC} $1"; }

# Cleanup on exit
cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        echo -e "\nBootstrap interrupted. You can safely run it again."
    fi
}

# ============================================================================
# Platform Detection
# ============================================================================

detect_platform() {
{% if yadm.os == "Darwin" %}
    echo "macos"
{% endif %}
{% if yadm.os == "Windows" %}
    echo "windows"
{% endif %}
{% if yadm.os == "WSL" %}
    # WSL is still Linux, but we'll check distribution
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        case "${ID,,}" in
            ubuntu|debian) echo "debian" ;;
            arch|manjaro) echo "arch" ;;
            fedora) echo "fedora" ;;
            *) echo "linux" ;;
        esac
    else
        echo "linux"
    fi
{% endif %}
{% if yadm.os == "Linux" %}
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        case "${ID,,}" in
            ubuntu|debian) echo "debian" ;;
            arch|manjaro) echo "arch" ;;
            fedora) echo "fedora" ;;
            *) echo "linux" ;;
        esac
    else
        echo "linux"
    fi
{% endif %}
}

# ============================================================================
# Setup Functions
# ============================================================================

setup_directories() {
    info "Creating directory structure..."
    
    local dirs=(
        "$HOME/.config"
        "$HOME/.local/bin"
        "$HOME/.local/share"
        "$HOME/.cache"
        "$HOME/.ssh/config.d"
        "$HOME/.config/git/hooks"
        "$HOME/.config/zsh/plugins"
        "$HOME/.claude"
    )
    
    for dir in "${dirs[@]}"; do
        mkdir -p "$dir"
    done
    
    # Set secure permissions
    chmod 700 "$HOME/.ssh" "$HOME/.ssh/config.d" 2>/dev/null || true
}

setup_package_manager() {
    info "Setting up package manager..."
    
{% if yadm.os == "Darwin" %}
    # Install Homebrew if not present
    if ! command -v brew &>/dev/null; then
        info "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH
        if [[ -d "/opt/homebrew" ]]; then
            eval "$(/opt/homebrew/bin/brew shellenv)"
        else
            eval "$(/usr/local/bin/brew shellenv)"
        fi
    fi
    
    # Update Homebrew
    brew update
{% endif %}
    
{% if yadm.os == "Windows" %}
    # Verify winget is available
    if ! command -v winget &>/dev/null; then
        error "winget not found. Please install App Installer from Microsoft Store"
        error "https://www.microsoft.com/store/productId/9NBLGGH4NNS1"
        exit 1
    fi
    
    # Update winget sources
    info "Updating winget sources..."
    winget source update
{% endif %}
    
{% if yadm.os == "Linux" or yadm.os == "WSL" %}
    # Linux: Update package manager
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        case "${ID,,}" in
            ubuntu|debian)
                sudo apt-get update || true
                ;;
            arch|manjaro)
                sudo pacman -Syu --noconfirm
                ;;
            fedora)
                sudo dnf update -y
                ;;
        esac
    fi
{% endif %}
}

install_packages() {
    info "Installing packages..."
    
    local platform=$(detect_platform)
    
    # Run package installer
    local installer="$HOME/.config/yadm/packages/installer.sh"
    if [[ -f "$installer" ]]; then
        chmod +x "$installer"
        
        # Export functions for installer
        export -f info success error warning
        
        "$installer"
    else
        warning "Package installer not found, skipping package installation"
    fi
    
{% if yadm.os == "Darwin" %}
    # Install from Brewfile if exists
    local brewfile="$HOME/.config/homebrew/Brewfile"
    if [[ -f "$brewfile" ]]; then
        info "Installing Homebrew packages..."
        brew bundle --file="$brewfile"
    fi
{% endif %}
}


show_completion_message() {
    echo
    success "Bootstrap completed successfully!"
    echo
    echo "Next steps:"
    echo "  1. Restart your terminal to apply all changes"
    
{% if yadm.os == "Darwin" or yadm.os == "Linux" or yadm.os == "WSL" %}
    if [[ "$(basename "$SHELL")" != "zsh" ]]; then
        echo "  2. Set Zsh as your default shell:"
        echo "     chsh -s $(which zsh)"
    fi
{% endif %}
    
    if command -v mise &>/dev/null; then
        echo "  3. Install language runtimes with mise:"
        echo "     mise install"
    fi
    
    echo
    echo "For more information, see:"
    echo "  - README: https://github.com/$(git config --get remote.origin.url | sed 's/.*://;s/.git$//')"
    echo "  - Issues: https://github.com/$(git config --get remote.origin.url | sed 's/.*://;s/.git$//')/issues"
}

# ============================================================================
# Main
# ============================================================================

main() {
    # Setup error handling
    trap cleanup EXIT INT TERM
    
    # Show platform information
{% if yadm.os == "Darwin" %}
    info "Running macOS bootstrap..."
{% endif %}
{% if yadm.os == "Windows" %}
    info "Running Windows bootstrap..."
{% endif %}
{% if yadm.os == "WSL" %}
    info "Running Linux bootstrap (WSL)..."
{% endif %}
{% if yadm.os == "Linux" %}
    info "Running Linux bootstrap..."
{% endif %}
    
    # Execute bootstrap steps
    setup_directories
    setup_zdotdir
    setup_ssh
    setup_git_hooks
    setup_package_manager
    apply_platform_settings
    install_packages
    
    # Show completion message
    show_completion_message
}

# ============================================================================
# Additional Setup Functions
# ============================================================================

setup_zdotdir() {
    info "Configuring ZDOTDIR..."
    
    local zshenv_file=""
    local zdotdir_line='export ZDOTDIR="$HOME/.config/zsh"'
    
{% if yadm.os == "Darwin" %}
    zshenv_file="/etc/zshenv"
{% endif %}
{% if yadm.os == "Linux" or yadm.os == "WSL" %}
    zshenv_file="/etc/zsh/zshenv"
    # Create directory if it doesn't exist
    [[ ! -d /etc/zsh ]] && sudo mkdir -p /etc/zsh
{% endif %}
    
    # Check if already configured
    if sudo grep -q 'ZDOTDIR' "$zshenv_file" 2>/dev/null; then
        info "ZDOTDIR already configured"
        return
    fi
    
    # Interactive prompt
    echo "This will configure system-wide ZDOTDIR (requires sudo)"
    read -rp "Continue? (y/N): " -n 1 && echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info "Skipping ZDOTDIR configuration"
        return
    fi
    
    # Configure ZDOTDIR
    echo "$zdotdir_line" | sudo tee -a "$zshenv_file" >/dev/null
    success "ZDOTDIR configured"
}

setup_ssh() {
    info "Configuring SSH..."
    
    # Check if already configured
    if grep -q '^Include ~/.ssh/config.d/\*' "$HOME/.ssh/config" 2>/dev/null; then
        info "SSH already configured"
        return
    fi
    
    # Setup SSH config
    if [[ ! -f "$HOME/.ssh/config" ]]; then
        echo "Include ~/.ssh/config.d/*" > "$HOME/.ssh/config"
    else
        echo -e "Include ~/.ssh/config.d/*\n" | cat - "$HOME/.ssh/config" > "$HOME/.ssh/config.tmp"
        mv "$HOME/.ssh/config.tmp" "$HOME/.ssh/config"
    fi
    
    chmod 600 "$HOME/.ssh/config" 2>/dev/null || true
    success "SSH configured"
}

setup_git_hooks() {
    info "Setting up Git hooks..."
    
    # Make all git hooks executable
    find "$HOME/.config/git/hooks" -type f -exec chmod +x {} \; 2>/dev/null || true
    
    success "Git hooks configured"
}

apply_platform_settings() {
    info "Applying platform-specific settings..."
    
    local platform_dir="$HOME/.config/yadm/platforms"
    
{% if yadm.os == "Darwin" %}
    # Run macOS settings
    if [[ -f "$platform_dir/macos.sh" ]]; then
        chmod +x "$platform_dir/macos.sh"
        
        # Export functions for platform script
        export -f info success error warning
        
        "$platform_dir/macos.sh"
    fi
{% endif %}
    
{% if yadm.os == "Linux" or yadm.os == "WSL" %}
    # Run WSL settings
    if [[ -f "$platform_dir/wsl.sh" ]]; then
        chmod +x "$platform_dir/wsl.sh"
        
        # Export functions for platform script
        export -f info success error warning
        
        "$platform_dir/wsl.sh"
    fi
{% endif %}
}

# Run main function
main