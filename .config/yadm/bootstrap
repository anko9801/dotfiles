#!/usr/bin/env bash
# YADM Bootstrap - Main entry point

set -euo pipefail

# Check if we're running via yadm
if [[ -z "${YADM_BOOTSTRAP:-}" ]]; then
    echo "Error: This bootstrap should be run via 'yadm bootstrap'"
    echo "If you really want to run directly, set YADM_BOOTSTRAP=1"
    exit 1
fi

BOOTSTRAP_DIR="$HOME/.config/yadm"

# Function to set config
set_config() {
    local key="$1"
    local value="$2"
    yadm config "$key" "$value"
    echo "âœ“ Set $key = $value"
}

# Configure if needed
configure_yadm() {
    echo "======================================"
    echo "        YADM Configuration            "
    echo "======================================"
    echo
    
    # Check and set class
    current_class=$(yadm config local.class 2>/dev/null || echo "")
    if [[ -z "$current_class" ]]; then
        echo "No class is set. Please choose one:"
        echo "1) personal - Personal machine"
        echo "2) work     - Work machine"
        echo "3) server   - Server/headless machine"
        read -p "Select [1-3]: " -n 1 -r
        echo
        case "$REPLY" in
            1) set_config local.class personal ;;
            2) set_config local.class work ;;
            3) set_config local.class server ;;
            *) echo "Invalid selection"; exit 1 ;;
        esac
    else
        echo "Current class: $current_class"
    fi
    
    # Git configuration
    echo
    echo "Git Configuration:"
    echo "-----------------"
    current_email=$(yadm config user.email 2>/dev/null || echo "")
    current_name=$(yadm config user.name 2>/dev/null || echo "")
    
    if [[ -z "$current_email" ]]; then
        read -p "Git email: " email
        [[ -n "$email" ]] && set_config user.email "$email"
    else
        echo "Email: $current_email"
    fi
    
    if [[ -z "$current_name" ]]; then
        read -p "Git name: " name
        [[ -n "$name" ]] && set_config user.name "$name"
    else
        echo "Name: $current_name"
    fi
    
    # Auto-commit configuration
    echo
    echo "Auto-commit Configuration:"
    echo "-------------------------"
    auto_commit=$(yadm config yadm.auto-commit 2>/dev/null || echo "false")
    echo "Current: $auto_commit"
    read -p "Enable auto-commit? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        set_config yadm.auto-commit true
        set_config yadm.auto-commit-msg "Auto update from $(hostname)"
    fi
    
    # Encryption configuration
    echo
    echo "Encryption Configuration:"
    echo "------------------------"
    cipher=$(yadm config yadm.cipher 2>/dev/null || echo "")
    if [[ -z "$cipher" ]]; then
        echo "1) openssl (default)"
        echo "2) gpg"
        echo "3) skip"
        read -p "Select encryption method [1-3]: " -n 1 -r
        echo
        case "$REPLY" in
            1|"") 
                set_config yadm.cipher openssl
                echo "Openssl encryption will use your SSH key for encryption"
                echo "Make sure your SSH key is available when encrypting/decrypting"
                ;;
            2) 
                set_config yadm.cipher gpg
                read -p "GPG key ID (or email): " gpg_key
                [[ -n "$gpg_key" ]] && set_config yadm.gpg-recipient "$gpg_key"
                ;;
            3) 
                echo "Skipping encryption setup"
                ;;
        esac
    else
        echo "Encryption: $cipher"
    fi
    
    echo
}

# Run configuration if first time
if [[ -z "$(yadm config local.class 2>/dev/null)" ]]; then
    configure_yadm
fi

# Generate alternates
echo "Generating configuration files..."
yadm alt

# Determine OS and run OS-specific bootstrap
OS="$(uname -s)"
echo
echo "Running bootstrap for $OS..."

case "$OS" in
    Darwin)
        if [[ -x "$BOOTSTRAP_DIR/bootstrap##os.Darwin" ]]; then
            exec "$BOOTSTRAP_DIR/bootstrap##os.Darwin" "$@"
        else
            echo "Error: macOS bootstrap not found"
            exit 1
        fi
        ;;
    Linux)
        if [[ -x "$BOOTSTRAP_DIR/bootstrap##os.Linux" ]]; then
            exec "$BOOTSTRAP_DIR/bootstrap##os.Linux" "$@"
        else
            echo "Error: Linux bootstrap not found"
            exit 1
        fi
        ;;
    *)
        echo "Error: Unsupported OS: $OS"
        exit 1
        ;;
esac