#!/usr/bin/env bash
# YADM Bootstrap - Main entry point
set -euo pipefail

readonly BOOTSTRAP_DIR="$HOME/.config/yadm"
readonly EXIT_SUCCESS=0 EXIT_ERROR=1

cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne $EXIT_SUCCESS && $exit_code -ne 0 ]]; then
        echo -e "\nBootstrap interrupted. You can safely run it again."
    fi
    exit $exit_code
}
trap cleanup EXIT INT TERM

# ============================================================================
# Helper Functions
# ============================================================================

set_config() { yadm config "$1" "$2" && echo "âœ“ Set $1 = $2"; }
show_header() { echo -e "\n$1\n${1//?/-}"; }

configure_if_empty() {
    local current=$(yadm config "$1" 2>/dev/null || echo "")
    if [[ -z "$current" ]]; then
        read -rp "$2: " value
        [[ -n "$value" ]] && set_config "$1" "$value"
    else
        echo "${2%:}: $current"
    fi
}

# ============================================================================
# Configuration Functions
# ============================================================================

configure_class() {
    local current=$(yadm config local.class 2>/dev/null || echo "")
    [[ -n "$current" ]] && { echo "Current class: $current"; return; }
    
    if [[ -n "${YADM_CLASS:-}" ]]; then
        set_config local.class "$YADM_CLASS"
    else
        echo "Select class: 1) personal  2) work  3) server"
        read -rp "[1-3]: " -n 1 && echo
        case "$REPLY" in
            1) set_config local.class personal ;;
            2) set_config local.class work ;;
            3) set_config local.class server ;;
            *) echo "Invalid selection" && exit $EXIT_ERROR ;;
        esac
    fi
}

configure_hostname() {
    local current=$(yadm config local.hostname 2>/dev/null || echo "")
    if [[ -z "$current" ]]; then
        local system_hostname=$(hostname -s)
        set_config local.hostname "$system_hostname"
    else
        echo "Current hostname: $current"
    fi
}

configure_auto_commit() {
    echo "Current: $(yadm config yadm.auto-commit 2>/dev/null || echo 'false')"
    read -rp "Enable auto-commit? (y/N): " -n 1 && echo
    [[ $REPLY =~ ^[Yy]$ ]] && {
        set_config yadm.auto-commit true
        set_config yadm.auto-commit-msg "Auto update from $(hostname)"
    }
}

configure_encryption() {
    local cipher=$(yadm config yadm.cipher 2>/dev/null || echo "")
    [[ -n "$cipher" ]] && { echo "Encryption: $cipher"; return; }
    
    echo "Select encryption: 1) openssl  2) gpg  3) skip"
    read -rp "[1-3]: " -n 1 && echo
    case "$REPLY" in
        1|"") set_config yadm.cipher openssl ;;
        2) read -rp "GPG key ID: " key && [[ -n "$key" ]] && set_config yadm.gpg-recipient "$key" ;;
        3) echo "Skipping encryption" ;;
    esac
}

# ============================================================================
# Main Script
# ============================================================================

main() {
    # Run first-time configuration if needed
    if [[ -z "${YADM_SKIP_CONFIG:-}" && -z "$(yadm config local.class 2>/dev/null)" ]]; then
        echo "======================================"
        echo "        YADM Configuration            "
        echo "======================================"
        echo
        
        configure_class
        configure_hostname
        show_header "Git Configuration"
        configure_if_empty "yadm.email" "Git email"
        configure_if_empty "yadm.user" "Git name"
        show_header "Auto-commit Configuration"
        configure_auto_commit
        show_header "Encryption Configuration"
        configure_encryption
        echo
    fi
    
    # Generate alternates
    echo "Generating configuration files..."
    yadm alt
    
    # Fix permissions for sensitive files
    [[ -f "$HOME/.config/op/config" ]] && chmod 600 "$HOME/.config/op/config"
    
    # Run installation
    echo -e "\nRunning installation..."
    local install_script="$BOOTSTRAP_DIR/install"
    
    if [[ -x "$install_script" ]]; then
        exec "$install_script" "$@"
    else
        echo "Error: Install script not found or not executable"
        exit $EXIT_ERROR
    fi
}

# Run main function
main "$@"