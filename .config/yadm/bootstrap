#!/usr/bin/env bash
# YADM Bootstrap - Complete setup and installation
set -euo pipefail

# ============================================================================
# Configuration
# ============================================================================

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly HOME="${HOME:-$(eval echo ~)}"
readonly EXIT_SUCCESS=0 EXIT_ERROR=1

# Detect platform (Darwin, Linux, WSL, Windows)
case "$(uname -s)" in
    Darwin)
        readonly PLATFORM="Darwin"
        readonly DISTRO="macos"
        ;;
    Linux)
        if [[ -f /proc/sys/fs/binfmt_misc/WSLInterop ]]; then
            readonly PLATFORM="WSL"
        else
            readonly PLATFORM="Linux"
        fi
        
        # Detect Linux distribution
        if [[ -f /etc/os-release ]]; then
            . /etc/os-release
            case "${ID,,}" in
                ubuntu|debian)
                    readonly DISTRO="debian"
                    ;;
                arch|manjaro)
                    readonly DISTRO="arch"
                    ;;
                fedora)
                    readonly DISTRO="fedora"
                    ;;
                *)
                    readonly DISTRO="unknown"
                    ;;
            esac
        else
            readonly DISTRO="unknown"
        fi
        ;;
    MINGW*|CYGWIN*|MSYS*)
        readonly PLATFORM="Windows"
        readonly DISTRO="windows"
        ;;
    *)
        readonly PLATFORM="Unknown"
        readonly DISTRO="unknown"
        ;;
esac

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly BLUE='\033[0;34m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m'

# ============================================================================
# Utility Functions
# ============================================================================

info() { echo -e "${BLUE}==>${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }
warning() { echo -e "${YELLOW}!${NC} $1"; }

set_config() { yadm config "$1" "$2" && success "Set $1 = $2"; }
show_header() { echo -e "\n$1\n${1//?/-}"; }

# Cleanup on exit
cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        echo -e "\nBootstrap interrupted. You can safely run it again."
    fi
}

# ============================================================================
# Configuration Functions
# ============================================================================

configure_if_empty() {
    local current=$(yadm config "$1" 2>/dev/null || echo "")
    if [[ -z "$current" ]]; then
        read -rp "$2: " value
        [[ -n "$value" ]] && set_config "$1" "$value"
    else
        echo "${2%:}: $current"
    fi
}

configure_class() {
    local current=$(yadm config local.class 2>/dev/null || echo "")
    [[ -n "$current" ]] && { echo "Current class: $current"; return; }
    
    if [[ -n "${YADM_CLASS:-}" ]]; then
        set_config local.class "$YADM_CLASS"
    else
        echo "Select class: 1) personal  2) work  3) server"
        read -rp "[1-3]: " -n 1 && echo
        case "$REPLY" in
            1) set_config local.class personal ;;
            2) set_config local.class work ;;
            3) set_config local.class server ;;
            *) error "Invalid selection" && exit $EXIT_ERROR ;;
        esac
    fi
}

configure_hostname() {
    local current=$(yadm config local.hostname 2>/dev/null || echo "")
    if [[ -z "$current" ]]; then
        local system_hostname=$(hostname -s)
        set_config local.hostname "$system_hostname"
    else
        echo "Current hostname: $current"
    fi
}

configure_auto_commit() {
    echo "Current: $(yadm config yadm.auto-commit 2>/dev/null || echo 'false')"
    read -rp "Enable auto-commit? (y/N): " -n 1 && echo
    [[ $REPLY =~ ^[Yy]$ ]] && {
        set_config yadm.auto-commit true
        set_config yadm.auto-commit-msg "Auto update from $(hostname)"
    }
}

configure_encryption() {
    local cipher=$(yadm config yadm.cipher 2>/dev/null || echo "")
    [[ -n "$cipher" ]] && { echo "Encryption: $cipher"; return; }
    
    echo "Select encryption: 1) openssl  2) gpg  3) skip"
    read -rp "[1-3]: " -n 1 && echo
    case "$REPLY" in
        1|"") set_config yadm.cipher openssl ;;
        2) read -rp "GPG key ID: " key && [[ -n "$key" ]] && set_config yadm.gpg-recipient "$key" ;;
        3) echo "Skipping encryption" ;;
    esac
}

# ============================================================================
# Setup Functions
# ============================================================================

setup_directories() {
    info "Creating directory structure..."
    
    local dirs=(
        "$HOME/.local/bin"
        "$HOME/.local/share"
        "$HOME/.cache"
        "$HOME/.claude"
        "$HOME/.config/op"
    )
    
    for dir in "${dirs[@]}"; do
        mkdir -p "$dir"
    done
    
    # Set secure permissions
    chmod 700 "$HOME/.ssh" "$HOME/.ssh/config.d" 2>/dev/null || true
    [[ -d "$HOME/.config/op" ]] && chmod 700 "$HOME/.config/op"
    [[ -f "$HOME/.config/op/config" ]] && chmod 600 "$HOME/.config/op/config"
}

setup_package_manager() {
    info "Setting up package manager..."
    
    case "$PLATFORM" in
        Darwin)
            # Install Homebrew if not present
            if ! command -v brew &>/dev/null; then
                info "Installing Homebrew..."
                /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                
                # Add Homebrew to PATH
                if [[ -d "/opt/homebrew" ]]; then
                    eval "$(/opt/homebrew/bin/brew shellenv)"
                else
                    eval "$(/usr/local/bin/brew shellenv)"
                fi
            fi
            
            # Update Homebrew
            brew update
            ;;
        WSL|Linux)
            # Linux: Update package manager
            case "$DISTRO" in
                debian)
                    sudo apt-get update || true
                    ;;
                arch)
                    sudo pacman -Syu --noconfirm
                    ;;
                fedora)
                    sudo dnf update -y
                    ;;
            esac
            ;;
        Windows)
            # Windows: Check for package managers
            if ! command -v winget &>/dev/null; then
                warning "Winget not found. Please install Windows Package Manager"
            fi
            
            if ! command -v scoop &>/dev/null; then
                info "Installing Scoop..."
                powershell -Command "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force"
                powershell -Command "irm get.scoop.sh | iex"
            fi
            ;;
    esac
}

install_packages() {
    info "Installing packages..."
    
    # Run package installer
    local installer="$HOME/.config/yadm/installer.sh"
    if [[ -f "$installer" ]]; then
        chmod +x "$installer"
        
        # Export functions and variables for installer
        export -f info success error warning
        export RED GREEN BLUE YELLOW NC
        export PLATFORM DISTRO
        
        "$installer"
    else
        warning "Package installer not found, skipping package installation"
    fi
    
    # Install from Brewfile on macOS
    if [[ "$PLATFORM" == "Darwin" ]]; then
        local brewfile="$HOME/.config/yadm/Brewfile"
        if [[ -f "$brewfile" ]]; then
            info "Installing Homebrew packages from Brewfile..."
            brew bundle --file="$brewfile"
        else
            warning "Brewfile not found at $brewfile"
        fi
    fi
}


show_completion_message() {
    echo
    success "Bootstrap completed successfully!"
    echo
    echo "Next steps:"
    echo "  1. Restart your terminal to apply all changes"
    
    # Platform-specific next steps
    case "$PLATFORM" in
        Darwin|WSL|Linux)
            if [[ "$(basename "$SHELL")" != "zsh" ]]; then
                echo "  2. Set Zsh as your default shell:"
                echo "     chsh -s $(which zsh)"
            fi
            ;;
        Windows)
            echo "  2. Restart Git Bash or your terminal emulator"
            ;;
    esac
}

# ============================================================================
# Additional Setup Functions
# ============================================================================

setup_zdotdir() {
    info "Configuring ZDOTDIR..."
    
    # Skip on Windows (Git Bash doesn't use Zsh)
    if [[ "$PLATFORM" == "Windows" ]]; then
        info "Skipping ZDOTDIR configuration on Windows"
        return
    fi
    
    local zshenv_file=""
    local zdotdir_line='export ZDOTDIR="$HOME/.config/zsh"'
    
    case "$PLATFORM" in
        Darwin)
            zshenv_file="/etc/zshenv"
            ;;
        WSL|Linux)
            zshenv_file="/etc/zsh/zshenv"
            # Create directory if it doesn't exist
            [[ ! -d /etc/zsh ]] && sudo mkdir -p /etc/zsh
            ;;
    esac
    
    # Check if already configured
    if sudo grep -q 'ZDOTDIR' "$zshenv_file" 2>/dev/null; then
        info "ZDOTDIR already configured"
        return
    fi
    
    # Interactive prompt
    echo "This will configure system-wide ZDOTDIR (requires sudo)"
    read -rp "Continue? (y/N): " -n 1 && echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        info "Skipping ZDOTDIR configuration"
        return
    fi
    
    # Configure ZDOTDIR
    echo "$zdotdir_line" | sudo tee -a "$zshenv_file" >/dev/null
    success "ZDOTDIR configured"
}

setup_ssh() {
    info "Configuring SSH..."
    
    # Check if already configured
    if grep -q '^Include ~/.ssh/config.d/\*' "$HOME/.ssh/config" 2>/dev/null; then
        info "SSH already configured"
        return
    fi
    
    # Setup SSH config
    if [[ ! -f "$HOME/.ssh/config" ]]; then
        echo "Include ~/.ssh/config.d/*" > "$HOME/.ssh/config"
    else
        echo -e "Include ~/.ssh/config.d/*\n" | cat - "$HOME/.ssh/config" > "$HOME/.ssh/config.tmp"
        mv "$HOME/.ssh/config.tmp" "$HOME/.ssh/config"
    fi
    
    chmod 600 "$HOME/.ssh/config" 2>/dev/null || true
    success "SSH configured"
}

setup_git_hooks() {
    info "Setting up Git hooks..."
    
    # Make all git hooks executable
    find "$HOME/.config/git/hooks" -type f -exec chmod +x {} \; 2>/dev/null || true
    
    success "Git hooks configured"
}

apply_platform_settings() {
    info "Applying platform-specific settings..."
    
    # Platform scripts are managed by yadm alternates
    # They will be automatically linked based on OS
    local platform_script="$HOME/.config/yadm/platform.sh"
    
    if [[ -f "$platform_script" ]]; then
        chmod +x "$platform_script"
        
        # Export functions for platform script
        export -f info success error warning
        export RED GREEN BLUE YELLOW NC
        
        "$platform_script"
    else
        info "No platform-specific settings to apply"
    fi
}

# ============================================================================
# Main
# ============================================================================

main() {
    # Setup error handling
    trap cleanup EXIT INT TERM
    
    # Run first-time configuration if needed
    if [[ -z "${YADM_SKIP_CONFIG:-}" && -z "$(yadm config local.class 2>/dev/null)" ]]; then
        echo "======================================"
        echo "        YADM Configuration            "
        echo "======================================"
        echo
        
        configure_class
        configure_hostname
        show_header "Git Configuration"
        configure_if_empty "yadm.email" "Git email"
        configure_if_empty "yadm.user" "Git name"
        show_header "Auto-commit Configuration"
        configure_auto_commit
        show_header "Encryption Configuration"
        configure_encryption
        echo
    fi
    
    # Generate alternates
    info "Generating configuration files..."
    yadm alt
    
    # Show platform information
    info "Platform: $PLATFORM / Distribution: $DISTRO"
    
    # Execute bootstrap steps
    setup_directories
    setup_zdotdir
    setup_ssh
    setup_git_hooks
    setup_package_manager
    apply_platform_settings
    install_packages
    
    # Show completion message
    show_completion_message
}

# Run main function
main "$@"