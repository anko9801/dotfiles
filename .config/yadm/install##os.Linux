#!/usr/bin/env bash
# Bootstrap for Linux

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging
info() { echo -e "${BLUE}==>${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }
warning() { echo -e "${YELLOW}!${NC} $1"; }

info "Running Linux bootstrap..."

# Debug: Show environment
echo "DEBUG: Current directory: $(pwd)"
echo "DEBUG: HOME: $HOME"
echo "DEBUG: Script: $0"

# 1. Create necessary directories first
info "Creating directories..."
mkdir -p "$HOME/.config" "$HOME/.local/bin" "$HOME/.local/share" "$HOME/.cache"

# 2. Detect distribution
if [[ -f /etc/os-release ]]; then
    . /etc/os-release
    DISTRO="${ID,,}"
else
    DISTRO="unknown"
fi

info "Detected distribution: $DISTRO"

# 3. Update package manager and install packages based on distribution
case "$DISTRO" in
    ubuntu|debian)
        info "Updating apt repositories..."
        sudo apt-get update || {
            warning "Failed to update apt repositories"
        }
        
        info "Installing base packages..."
        sudo apt-get install -y \
            curl wget git \
            build-essential software-properties-common \
            zsh tmux neovim \
            tree jq || {
            warning "Some packages failed to install"
        }
        
        # Add repositories for modern tools
        info "Adding PPAs for modern tools..."
        
        # GitHub CLI
        if ! command -v gh &>/dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install -y gh
        fi
        
        # Install tools available in apt
        info "Installing available tools from apt..."
        apt_tools=(fzf git-secrets)
        for tool in "${apt_tools[@]}"; do
            sudo apt install -y "$tool" || warning "Failed to install $tool"
        done
        
        # Modern CLI tools will be installed via mise with cargo backend
        info "Modern CLI tools (ripgrep, fd, bat, eza) will be installed via mise..."
        
        # Note: starship and other Rust tools will be installed via mise
        ;;
        
    arch|manjaro)
        info "Updating pacman..."
        sudo pacman -Syu --noconfirm
        
        info "Installing packages..."
        sudo pacman -S --noconfirm \
            git curl wget tmux tree jq yq \
            base-devel \
            zsh fish neovim \
            ripgrep fd bat fzf gh \
            eza zoxide starship atuin \
            go rust \
            git-secrets
        ;;
        
    fedora)
        info "Updating dnf..."
        sudo dnf update -y
        
        info "Installing packages..."
        sudo dnf install -y \
            git curl wget tmux tree jq \
            @development-tools \
            zsh fish neovim \
            ripgrep fd-find bat fzf gh \
            git-secrets
        
        # Note: starship will be installed via mise
        ;;
        
    *)
        error "Unsupported distribution: $DISTRO"
        exit 1
        ;;
esac

# 4. Install mise (version manager)
if ! command -v mise &>/dev/null; then
    info "Installing mise..."
    # Try to install from package manager first
    case "$DISTRO" in
        ubuntu|debian)
            # mise is not in standard repos, use install script
            curl https://mise.run | sh
            ;;
        arch|manjaro)
            # Available in AUR
            if command -v yay &>/dev/null; then
                yay -S --noconfirm mise || curl https://mise.run | sh
            elif command -v paru &>/dev/null; then
                paru -S --noconfirm mise || curl https://mise.run | sh
            else
                curl https://mise.run | sh
            fi
            ;;
        fedora)
            # mise is not in standard repos, use install script
            curl https://mise.run | sh
            ;;
        *)
            curl https://mise.run | sh
            ;;
    esac
    export PATH="$HOME/.local/bin:$PATH"
    success "mise installed"
fi

# 5. Setup mise tools and language runtimes
if command -v mise &>/dev/null; then
    info "Setting up mise..."
    eval "$(mise activate bash)"
    
    # Trust config file
    mise trust "$HOME/.config/mise/config.toml" || true
    
    # Install all tools defined in config.toml
    info "Installing tools from mise config..."
    # Install tools one by one to handle failures gracefully
    mise install --yes || {
        warning "Some tools failed to install, continuing..."
        # Try to install essential tools individually
        mise install node@latest || true
        mise install pnpm@latest || true
        mise install deno@latest || true
        mise install bun@latest || true
        mise install go@latest || true
        mise install rust@latest || true
        mise install uv@latest || true
        mise install ruff@latest || true
        # Skip ruby if it fails
        mise install ruby@latest || warning "Ruby installation failed, skipping"
    }
    
    success "mise configured"
fi

# 6. Setup development tools (requires languages from mise)
info "Setting up development tools..."

# Git secrets configuration
if command -v git-secrets &>/dev/null; then
    mkdir -p ~/.config/git/templates/git-secrets
    git secrets --install ~/.config/git/templates/git-secrets >/dev/null 2>&1 || true
    git config --global init.templateDir ~/.config/git/templates/git-secrets
    git secrets --register-aws >/dev/null 2>&1 || true
    success "git-secrets configured"
fi

# Global npm packages are now managed by mise config.toml

# Install GitHub Copilot CLI extension
if command -v gh &>/dev/null; then
    if ! gh extension list | grep -q "github/gh-copilot"; then
        gh extension install github/gh-copilot || true
    fi
fi

# 7. Setup Zsh and antidote
info "Setting up Zsh..."
if [[ ! -d "${ZDOTDIR:-$HOME}/.antidote" ]]; then
    git clone --depth=1 https://github.com/mattmc3/antidote.git "${ZDOTDIR:-$HOME}/.antidote"
    success "antidote installed"
fi

# 8. Final summary
success "Bootstrap completed!"
echo
echo "Installed tools:"
echo "  ✓ Base development packages"
echo "  ✓ Modern CLI tools (ripgrep, fd, bat, etc.)"
echo "  ✓ mise with all configured tools"
echo "  ✓ Development tools and Git configuration"
echo "  ✓ Zsh with antidote"
echo
echo "Configuration: class=$(yadm config local.class || echo "personal")"
echo
echo "Next steps:"
echo "1. Restart your terminal"
echo "2. Run 'exec zsh' to switch to Zsh"
echo "3. If needed: chsh -s $(which zsh)"