#!/usr/bin/env bash
# Bootstrap for Linux

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Temporary directories to clean up
TEMP_DIRS=()

# Cleanup function
cleanup() {
    local exit_code=$?
    # Clean up temporary directories
    for dir in "${TEMP_DIRS[@]}"; do
        if [[ -d "$dir" ]]; then
            rm -rf "$dir"
        fi
    done
    if [[ $exit_code -ne 0 ]]; then
        echo
        echo "Installation interrupted. You can safely run it again."
    fi
    exit $exit_code
}

# Set trap for cleanup
trap cleanup EXIT INT TERM

# Logging
info() { echo -e "${BLUE}==>${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }
warning() { echo -e "${YELLOW}!${NC} $1"; }

if [[ -n "${IS_WSL:-}" ]]; then
    info "Running Linux bootstrap (via WSL)..."
else
    info "Running Linux bootstrap..."
fi

# Create necessary directories
setup_directories() {
    info "Creating directories..."
    local dirs=(
        "$HOME/.config"
        "$HOME/.local/bin"
        "$HOME/.local/share"
        "$HOME/.cache"
    )
    mkdir -p "${dirs[@]}"
}

# Detect Linux distribution
detect_distro() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        DISTRO="${ID,,}"
    else
        DISTRO="unknown"
    fi
    info "Detected distribution: $DISTRO"
}

# Universal package installation function
install_packages() {
    if command -v apt &>/dev/null; then
        sudo apt install -y "$@"
    elif command -v pacman &>/dev/null; then
        sudo pacman -S --needed --noconfirm "$@"
    elif command -v dnf &>/dev/null; then
        sudo dnf install -y "$@"
    elif command -v zypper &>/dev/null; then
        sudo zypper install -y "$@"
    elif command -v apk &>/dev/null; then
        sudo apk add --no-cache "$@"
    fi
}

# Add COPR repository and install package
install_from_copr() {
    local repo="$1" package="$2"
    sudo dnf copr enable -y "$repo"
    install_packages "$package"
}

# Install base packages for each distribution
setup_packages() {
    # Update package manager
    case "$DISTRO" in
        ubuntu|debian) sudo apt-get update || warning "Failed to update apt repositories" ;;
        arch|manjaro) sudo pacman -Syu --noconfirm ;;
        fedora) sudo dnf update -y ;;
    esac
    
    info "Installing base packages..."
    
    # Common packages across all distributions
    install_packages git curl wget tmux tree jq zsh neovim fzf git-secrets
    
    # Distribution-specific setup
    case "$DISTRO" in
    ubuntu|debian)
        install_packages build-essential software-properties-common
        
        if ! command -v gh &>/dev/null; then
            info "Adding GitHub CLI repository..."
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            install_packages gh
        fi
        
        # Install modern CLI tools from .deb files
        info "Installing modern CLI tools..."
        local tmp_dir=$(mktemp -d)
        TEMP_DIRS+=("$tmp_dir")
        cd "$tmp_dir"
        
        # ripgrep
        if ! command -v rg &>/dev/null; then
            local version=$(curl -s https://api.github.com/repos/BurntSushi/ripgrep/releases/latest | grep -Po '"tag_name": "\K[^"]*')
            curl -LO "https://github.com/BurntSushi/ripgrep/releases/download/${version}/ripgrep_${version}-1_amd64.deb"
            sudo dpkg -i ripgrep_*.deb || sudo apt-get install -f -y
        fi
        
        # fd
        if ! command -v fd &>/dev/null; then
            local version=$(curl -s https://api.github.com/repos/sharkdp/fd/releases/latest | grep -Po '"tag_name": "v\K[^"]*')
            curl -LO "https://github.com/sharkdp/fd/releases/download/v${version}/fd_${version}_amd64.deb"
            sudo dpkg -i fd_*.deb || sudo apt-get install -f -y
        fi
        
        # bat
        if ! command -v bat &>/dev/null; then
            local version=$(curl -s https://api.github.com/repos/sharkdp/bat/releases/latest | grep -Po '"tag_name": "v\K[^"]*')
            curl -LO "https://github.com/sharkdp/bat/releases/download/v${version}/bat_${version}_amd64.deb"
            sudo dpkg -i bat_*.deb || sudo apt-get install -f -y
        fi
        
        # eza
        if ! command -v eza &>/dev/null; then
            local version=$(curl -s https://api.github.com/repos/eza-community/eza/releases/latest | grep -Po '"tag_name": "v\K[^"]*')
            curl -LO "https://github.com/eza-community/eza/releases/download/v${version}/eza_amd64.deb" || \
            curl -LO "https://github.com/eza-community/eza/releases/download/v${version}/eza_${version}-1_amd64.deb"
            sudo dpkg -i eza*.deb || sudo apt-get install -f -y
        fi
        
        cd - >/dev/null
        
        # starship
        if ! command -v starship &>/dev/null; then
            curl -sS https://starship.rs/install.sh | sh -s -- -y
        fi
        
        # zoxide
        if ! command -v zoxide &>/dev/null; then
            local tmp_zoxide=$(mktemp -d)
            TEMP_DIRS+=("$tmp_zoxide")
            cd "$tmp_zoxide"
            local version=$(curl -s https://api.github.com/repos/ajeetdsouza/zoxide/releases/latest | grep -Po '"tag_name": "v\K[^"]*')
            curl -LO "https://github.com/ajeetdsouza/zoxide/releases/download/v${version}/zoxide_${version}-1_amd64.deb"
            sudo dpkg -i zoxide_*.deb || sudo apt-get install -f -y
            cd - >/dev/null
        fi
        
        # atuin
        if ! command -v atuin &>/dev/null; then
            bash <(curl --proto '=https' --tlsv1.2 -sSf https://setup.atuin.sh)
        fi
        
        # git-delta
        if ! command -v delta &>/dev/null; then
            local version=$(curl -s https://api.github.com/repos/dandavison/delta/releases/latest | grep -Po '"tag_name": "\K[^"]*')
            curl -LO "https://github.com/dandavison/delta/releases/download/${version}/git-delta_${version}_amd64.deb"
            sudo dpkg -i git-delta_*.deb || sudo apt-get install -f -y
        fi
        ;;
        
    arch|manjaro)
        install_packages base-devel yq fish ripgrep fd bat gh eza starship zoxide atuin git-delta
        ;;
        
    fedora)
        install_packages @development-tools fish ripgrep fd-find bat gh git-delta
        
        # Tools from COPR repositories
        command -v eza &>/dev/null || install_from_copr atim/eza eza
        command -v zoxide &>/dev/null || install_from_copr atim/zoxide zoxide
        
        # Tools from install scripts
        if ! command -v starship &>/dev/null; then
            info "Installing starship..."
            curl -sS https://starship.rs/install.sh | sh -s -- -y
        fi
        
        if ! command -v atuin &>/dev/null; then
            info "Installing atuin..."
            bash <(curl --proto '=https' --tlsv1.2 -sSf https://setup.atuin.sh)
        fi
        ;;
    esac
}

# Install mise version manager
install_mise() {
    if ! command -v mise &>/dev/null; then
        info "Installing mise..."
        case "$DISTRO" in
            ubuntu|debian)
                curl https://mise.run | sh
                ;;
            arch|manjaro)
                # Try AUR helpers first
                if command -v yay &>/dev/null; then
                    yay -S --noconfirm mise || curl https://mise.run | sh
                elif command -v paru &>/dev/null; then
                    paru -S --noconfirm mise || curl https://mise.run | sh
                else
                    curl https://mise.run | sh
                fi
                ;;
            fedora)
                curl https://mise.run | sh
                ;;
            *)
                curl https://mise.run | sh
                ;;
        esac
        export PATH="$HOME/.local/bin:$PATH"
        success "mise installed"
    fi
}

# Setup mise and install tools
setup_mise() {
    if command -v mise &>/dev/null; then
        info "Setting up mise..."
        export PATH="$HOME/.local/bin:$PATH"
        eval "$(mise activate bash)"
        
        # Trust config file
        mise trust "$HOME/.config/mise/config.toml" || true
        
        # Install all tools defined in config.toml
        info "Installing tools from mise config..."
        mise install --yes || {
            warning "Some tools failed to install, continuing..."
            # Try to install essential tools individually
            mise install node@latest || true
            mise install pnpm@latest || true
            mise install deno@latest || true
            mise install bun@latest || true
            mise install go@latest || true
            mise install rust@latest || true
            mise install ruby@latest || warning "Ruby installation failed, skipping"
        }
        
        success "mise configured"
    fi
}

# Install uv and Python tools
setup_python_tools() {
    if ! command -v uv &>/dev/null; then
        info "Installing uv..."
        curl -LsSf https://astral.sh/uv/install.sh | sh
        export PATH="$HOME/.cargo/bin:$PATH"
        success "uv installed"
    fi
    
    if command -v uv &>/dev/null; then
        info "Installing Python tools via uv..."
        uv tool install ruff@latest || true
        success "Python tools installed"
    fi
}

# Setup git-secrets
setup_git_secrets() {
    if command -v git-secrets &>/dev/null; then
        local template_dir="$HOME/.config/git/templates/git-secrets"
        mkdir -p "$template_dir"
        
        if [[ ! -f "$template_dir/hooks/commit-msg" ]]; then
            git secrets --install "$template_dir" >/dev/null 2>&1 || true
        fi
        
        git config --global init.templateDir "$template_dir"
        
        # Check if AWS patterns are already registered
        if ! git secrets --list 2>/dev/null | grep -q "AWS"; then
            git secrets --register-aws >/dev/null 2>&1 || true
        fi
        success "git-secrets configured"
    fi
}

# Setup GitHub CLI extensions
setup_gh_extensions() {
    if command -v gh &>/dev/null; then
        if ! gh extension list | grep -q "github/gh-copilot"; then
            gh extension install github/gh-copilot || true
        fi
    fi
}

# Setup Zsh with antidote
setup_zsh() {
    info "Setting up Zsh..."
    local antidote_dir="${ZDOTDIR:-$HOME}/.antidote"
    
    if [[ ! -d "$antidote_dir" ]]; then
        git clone --depth=1 https://github.com/mattmc3/antidote.git "$antidote_dir"
        success "antidote installed"
    fi
}

# Setup 1Password SSH integration (simplified - configs are now in templates)
setup_1password_ssh() {
    info "Setting up 1Password SSH integration..."
    
    # Ensure SSH directory and config.d exist with correct permissions
    mkdir -p "$HOME/.ssh/config.d"
    chmod 700 "$HOME/.ssh"
    chmod 700 "$HOME/.ssh/config.d"
    
    # Add Include directive to SSH config if not present
    if [[ -f "$HOME/.ssh/config" ]]; then
        if ! grep -q "^Include ~/.ssh/config.d/\*" "$HOME/.ssh/config"; then
            # Add Include at the beginning of the file
            echo -e "# Added by yadm\nInclude ~/.ssh/config.d/*\n" | cat - "$HOME/.ssh/config" > "$HOME/.ssh/config.tmp"
            mv "$HOME/.ssh/config.tmp" "$HOME/.ssh/config"
            chmod 600 "$HOME/.ssh/config"
            success "Added Include directive to SSH config"
        fi
    else
        # Create minimal SSH config with Include
        echo -e "# SSH Configuration\n# Added by yadm\n\nInclude ~/.ssh/config.d/*\n" > "$HOME/.ssh/config"
        chmod 600 "$HOME/.ssh/config"
        success "Created SSH config with Include directive"
    fi
    
    # Check if 1Password CLI is available
    if command -v op >/dev/null 2>&1; then
        success "1Password CLI found"
        # Set up shell plugins if available
        if [[ -f "$HOME/.config/op/plugins.sh" ]]; then
            info "Setting up 1Password shell plugins..."
            bash "$HOME/.config/op/plugins.sh" || true
        fi
    else
        warning "1Password CLI not found - install from https://developer.1password.com/docs/cli/"
    fi
}

# Set correct file permissions
set_permissions() {
    info "Setting correct permissions..."
    
    # SSH directory
    if [[ -d "$HOME/.ssh" ]]; then
        chmod 700 "$HOME/.ssh"
        find "$HOME/.ssh" -type f -name "id_*" ! -name "*.pub" -exec chmod 600 {} \;
        find "$HOME/.ssh" -type f -name "*.pub" -exec chmod 644 {} \;
        [[ -f "$HOME/.ssh/config" ]] && chmod 600 "$HOME/.ssh/config"
    fi
    
    # GPG directory
    if [[ -d "$HOME/.gnupg" ]]; then
        chmod 700 "$HOME/.gnupg"
        find "$HOME/.gnupg" -type f -exec chmod 600 {} \;
    fi
}

# Show installation summary
show_summary() {
    success "Bootstrap completed!"
    echo
    echo "Installed tools:"
    echo "  ✓ Base development packages"
    echo "  ✓ Modern CLI tools (ripgrep, fd, bat, etc.)"
    echo "  ✓ mise with all configured tools"
    echo "  ✓ uv (Python package manager)"
    echo "  ✓ Development tools and Git configuration"
    echo "  ✓ Zsh with antidote"
    echo
    echo "Configuration: class=$(yadm config local.class || echo "personal")"
    echo
    echo "Next steps:"
    echo "1. Restart your terminal"
    echo "2. Run 'exec zsh' to switch to Zsh"
    echo "3. If needed: chsh -s $(which zsh)"
}

# Main execution
setup_directories
detect_distro
setup_packages

install_mise
setup_mise
setup_python_tools

info "Setting up development tools..."
setup_git_secrets
setup_gh_extensions

setup_zsh
setup_1password_ssh
set_permissions
show_summary