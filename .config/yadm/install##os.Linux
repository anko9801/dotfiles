#!/usr/bin/env bash
# Bootstrap for Linux

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Temporary directories to clean up
TEMP_DIRS=()

# Cleanup function
cleanup() {
    local exit_code=$?
    # Clean up temporary directories
    for dir in "${TEMP_DIRS[@]}"; do
        if [[ -d "$dir" ]]; then
            rm -rf "$dir"
        fi
    done
    if [[ $exit_code -ne 0 ]]; then
        echo
        echo "Installation interrupted. You can safely run it again."
    fi
    exit $exit_code
}

# Set trap for cleanup
trap cleanup EXIT INT TERM

# Logging
info() { echo -e "${BLUE}==>${NC} $1"; }
success() { echo -e "${GREEN}✓${NC} $1"; }
error() { echo -e "${RED}✗${NC} $1" >&2; }
warning() { echo -e "${YELLOW}!${NC} $1"; }

if [[ -n "${IS_WSL:-}" ]]; then
    info "Running Linux bootstrap (via WSL)..."
else
    info "Running Linux bootstrap..."
fi

# Create necessary directories
setup_directories() {
    info "Creating directories..."
    local dirs=(
        "$HOME/.config"
        "$HOME/.local/bin"
        "$HOME/.local/share"
        "$HOME/.cache"
    )
    mkdir -p "${dirs[@]}"
}

# Detect Linux distribution
detect_distro() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        DISTRO="${ID,,}"
    else
        DISTRO="unknown"
    fi
    info "Detected distribution: $DISTRO"
}

# Install command helper
install_package() {
    local package="$1"
    if ! command -v "$package" &>/dev/null; then
        info "Installing $package..."
        return 0
    else
        return 1
    fi
}

# Install modern CLI tools for Debian/Ubuntu
install_modern_cli_tools_debian() {
    info "Installing modern CLI tools..."
    local tmp_dir=$(mktemp -d)
    TEMP_DIRS+=("$tmp_dir")
    cd "$tmp_dir"
    
    # ripgrep
    if install_package "rg"; then
        local version=$(curl -s https://api.github.com/repos/BurntSushi/ripgrep/releases/latest | grep -Po '"tag_name": "\K[^"]*')
        curl -LO "https://github.com/BurntSushi/ripgrep/releases/download/${version}/ripgrep_${version}-1_amd64.deb"
        sudo dpkg -i ripgrep_*.deb || sudo apt-get install -f -y
    fi
    
    # fd
    if install_package "fd"; then
        local version=$(curl -s https://api.github.com/repos/sharkdp/fd/releases/latest | grep -Po '"tag_name": "v\K[^"]*')
        curl -LO "https://github.com/sharkdp/fd/releases/download/v${version}/fd_${version}_amd64.deb"
        sudo dpkg -i fd_*.deb || sudo apt-get install -f -y
    fi
    
    # bat
    if install_package "bat"; then
        local version=$(curl -s https://api.github.com/repos/sharkdp/bat/releases/latest | grep -Po '"tag_name": "v\K[^"]*')
        curl -LO "https://github.com/sharkdp/bat/releases/download/v${version}/bat_${version}_amd64.deb"
        sudo dpkg -i bat_*.deb || sudo apt-get install -f -y
    fi
    
    # eza
    if install_package "eza"; then
        local version=$(curl -s https://api.github.com/repos/eza-community/eza/releases/latest | grep -Po '"tag_name": "v\K[^"]*')
        curl -LO "https://github.com/eza-community/eza/releases/download/v${version}/eza_amd64.deb" || \
        curl -LO "https://github.com/eza-community/eza/releases/download/v${version}/eza_${version}-1_amd64.deb"
        sudo dpkg -i eza*.deb || sudo apt-get install -f -y
    fi
    
    cd - >/dev/null
    
    # starship
    if install_package "starship"; then
        curl -sS https://starship.rs/install.sh | sh -s -- -y
    fi
    
    # zoxide
    if install_package "zoxide"; then
        local tmp_zoxide=$(mktemp -d)
        TEMP_DIRS+=("$tmp_zoxide")
        cd "$tmp_zoxide"
        local version=$(curl -s https://api.github.com/repos/ajeetdsouza/zoxide/releases/latest | grep -Po '"tag_name": "v\K[^"]*')
        curl -LO "https://github.com/ajeetdsouza/zoxide/releases/download/v${version}/zoxide_${version}-1_amd64.deb"
        sudo dpkg -i zoxide_*.deb || sudo apt-get install -f -y
        cd - >/dev/null
    fi
    
    # atuin
    if install_package "atuin"; then
        bash <(curl --proto '=https' --tlsv1.2 -sSf https://setup.atuin.sh)
    fi
}

# Install base packages for each distribution
setup_packages() {
    case "$DISTRO" in
    ubuntu|debian)
        info "Updating apt repositories..."
        sudo apt-get update || {
            warning "Failed to update apt repositories"
        }
        
        info "Installing base packages..."
        sudo apt-get install -y \
            curl wget git \
            build-essential software-properties-common \
            zsh tmux neovim \
            tree jq || {
            warning "Some packages failed to install"
        }
        
        # Add repositories for modern tools
        info "Adding PPAs for modern tools..."
        
        # GitHub CLI
        if ! command -v gh &>/dev/null; then
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update
            sudo apt install -y gh
        fi
        
        # Install tools available in apt
        info "Installing available tools from apt..."
        
        # Basic tools from standard repos
        apt_tools=(fzf git-secrets)
        for tool in "${apt_tools[@]}"; do
            sudo apt install -y "$tool" || warning "Failed to install $tool"
        done
        
        # Install modern CLI tools
        install_modern_cli_tools_debian
        ;;
        
    arch|manjaro)
        info "Updating pacman..."
        sudo pacman -Syu --noconfirm
        
        info "Installing packages..."
        sudo pacman -S --noconfirm \
            git curl wget tmux tree jq yq \
            base-devel \
            zsh fish neovim \
            ripgrep fd bat fzf gh \
            eza starship zoxide atuin \
            git-secrets
        ;;
        
    fedora)
        info "Updating dnf..."
        sudo dnf update -y
        
        info "Installing packages..."
        sudo dnf install -y \
            git curl wget tmux tree jq \
            @development-tools \
            zsh fish neovim \
            ripgrep fd-find bat fzf gh \
            git-secrets
        
        # eza from copr
        sudo dnf copr enable -y atim/eza
        sudo dnf install -y eza
        
        # starship from official script
        if ! command -v starship &>/dev/null; then
            info "Installing starship..."
            curl -sS https://starship.rs/install.sh | sh -s -- -y
        fi
        
        # zoxide from copr
        sudo dnf copr enable -y atim/zoxide
        sudo dnf install -y zoxide
        
        # atuin
        if ! command -v atuin &>/dev/null; then
            info "Installing atuin..."
            bash <(curl --proto '=https' --tlsv1.2 -sSf https://setup.atuin.sh)
        fi
        ;;
        
    *)
        error "Unsupported distribution: $DISTRO"
        exit 1
        ;;
esac

# Install mise version manager
install_mise() {
    if ! command -v mise &>/dev/null; then
        info "Installing mise..."
        case "$DISTRO" in
            ubuntu|debian)
                curl https://mise.run | sh
                ;;
            arch|manjaro)
                # Try AUR helpers first
                if command -v yay &>/dev/null; then
                    yay -S --noconfirm mise || curl https://mise.run | sh
                elif command -v paru &>/dev/null; then
                    paru -S --noconfirm mise || curl https://mise.run | sh
                else
                    curl https://mise.run | sh
                fi
                ;;
            fedora)
                curl https://mise.run | sh
                ;;
            *)
                curl https://mise.run | sh
                ;;
        esac
        export PATH="$HOME/.local/bin:$PATH"
        success "mise installed"
    fi
}

# Setup mise and install tools
setup_mise() {
    if command -v mise &>/dev/null; then
        info "Setting up mise..."
        export PATH="$HOME/.local/bin:$PATH"
        eval "$(mise activate bash)"
        
        # Trust config file
        mise trust "$HOME/.config/mise/config.toml" || true
        
        # Install all tools defined in config.toml
        info "Installing tools from mise config..."
        mise install --yes || {
            warning "Some tools failed to install, continuing..."
            # Try to install essential tools individually
            mise install node@latest || true
            mise install pnpm@latest || true
            mise install deno@latest || true
            mise install bun@latest || true
            mise install go@latest || true
            mise install rust@latest || true
            mise install ruby@latest || warning "Ruby installation failed, skipping"
        }
        
        success "mise configured"
    fi
}

# Install uv and Python tools
setup_python_tools() {
    if ! command -v uv &>/dev/null; then
        info "Installing uv..."
        curl -LsSf https://astral.sh/uv/install.sh | sh
        export PATH="$HOME/.cargo/bin:$PATH"
        success "uv installed"
    fi
    
    if command -v uv &>/dev/null; then
        info "Installing Python tools via uv..."
        uv tool install ruff@latest || true
        success "Python tools installed"
    fi
}

# Setup git-secrets
setup_git_secrets() {
    if command -v git-secrets &>/dev/null; then
        local template_dir="$HOME/.config/git/templates/git-secrets"
        mkdir -p "$template_dir"
        
        if [[ ! -f "$template_dir/hooks/commit-msg" ]]; then
            git secrets --install "$template_dir" >/dev/null 2>&1 || true
        fi
        
        git config --global init.templateDir "$template_dir"
        
        # Check if AWS patterns are already registered
        if ! git secrets --list 2>/dev/null | grep -q "AWS"; then
            git secrets --register-aws >/dev/null 2>&1 || true
        fi
        success "git-secrets configured"
    fi
}

# Setup GitHub CLI extensions
setup_gh_extensions() {
    if command -v gh &>/dev/null; then
        if ! gh extension list | grep -q "github/gh-copilot"; then
            gh extension install github/gh-copilot || true
        fi
    fi
}

# Setup Zsh with antidote
setup_zsh() {
    info "Setting up Zsh..."
    local antidote_dir="${ZDOTDIR:-$HOME}/.antidote"
    
    if [[ ! -d "$antidote_dir" ]]; then
        git clone --depth=1 https://github.com/mattmc3/antidote.git "$antidote_dir"
        success "antidote installed"
    fi
}

# Setup 1Password SSH integration (Linux)
setup_1password_ssh() {
    info "Setting up 1Password SSH integration..."
    
    # Create SSH config directory if it doesn't exist
    mkdir -p "$HOME/.ssh"
    chmod 700 "$HOME/.ssh"
    
    # Check if 1Password is installed
    if command -v op >/dev/null 2>&1; then
        local ssh_config="$HOME/.ssh/config"
        
        # Check if 1Password SSH agent config already exists
        if ! grep -q "IdentityAgent.*1Password" "$ssh_config" 2>/dev/null; then
            info "Adding 1Password SSH agent to SSH config..."
            
            # Backup before modifying
            if [[ -f "$ssh_config" ]]; then
                cp "$ssh_config" "$ssh_config.backup"
            fi
            
            # Linux socket path
            local socket_path="~/.1password/agent.sock"
            
            # Add 1Password SSH agent configuration
            cat >> "$ssh_config" <<EOF

# 1Password SSH Agent
Host *
    IdentityAgent "$socket_path"
EOF
            success "1Password SSH agent configuration added"
        else
            info "1Password SSH agent already configured"
        fi
        
        # Create 1Password config directory
        mkdir -p "$HOME/.config/op"
        
        # Create 1Password CLI config if not exists
        if [[ ! -f "$HOME/.config/op/config" ]]; then
            cat > "$HOME/.config/op/config" <<EOF
{
  "latest_signin": "",
  "device": "$(uuidgen 2>/dev/null || cat /proc/sys/kernel/random/uuid 2>/dev/null || echo 'default-device')",
  "commands": {
    "biometric_unlock": true
  },
  "cache": {
    "session": {
      "ttl": 1800
    }
  }
}
EOF
            success "1Password CLI configuration created"
        fi
    else
        warning "1Password CLI (op) not found. Install from: https://developer.1password.com/docs/cli/get-started/"
    fi
}

# Set correct file permissions
set_permissions() {
    info "Setting correct permissions..."
    
    # SSH directory
    if [[ -d "$HOME/.ssh" ]]; then
        chmod 700 "$HOME/.ssh"
        find "$HOME/.ssh" -type f -name "id_*" ! -name "*.pub" -exec chmod 600 {} \;
        find "$HOME/.ssh" -type f -name "*.pub" -exec chmod 644 {} \;
        [[ -f "$HOME/.ssh/config" ]] && chmod 600 "$HOME/.ssh/config"
    fi
    
    # GPG directory
    if [[ -d "$HOME/.gnupg" ]]; then
        chmod 700 "$HOME/.gnupg"
        find "$HOME/.gnupg" -type f -exec chmod 600 {} \;
    fi
}

# Show installation summary
show_summary() {
    success "Bootstrap completed!"
    echo
    echo "Installed tools:"
    echo "  ✓ Base development packages"
    echo "  ✓ Modern CLI tools (ripgrep, fd, bat, etc.)"
    echo "  ✓ mise with all configured tools"
    echo "  ✓ uv (Python package manager)"
    echo "  ✓ Development tools and Git configuration"
    echo "  ✓ Zsh with antidote"
    echo
    echo "Configuration: class=$(yadm config local.class || echo "personal")"
    echo
    echo "Next steps:"
    echo "1. Restart your terminal"
    echo "2. Run 'exec zsh' to switch to Zsh"
    echo "3. If needed: chsh -s $(which zsh)"
}

# Main execution
setup_directories
detect_distro
setup_packages

install_mise
setup_mise
setup_python_tools

info "Setting up development tools..."
setup_git_secrets
setup_gh_extensions

setup_zsh
setup_1password_ssh
set_permissions
show_summary