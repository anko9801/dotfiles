# XDG Base Directory
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"

# Environment
export GPG_TTY=$(tty)
export PATH="$HOME/downloads:$HOME/.cargo/bin:$PATH"
if [ -e $HOME/path ]; then
  export PATH="$PATH:$HOME/path"
fi

# History configuration
export HISTFILE=${HOME}/.zhistory
export HISTSIZE=10000
export SAVEHIST=10000
setopt hist_ignore_dups
setopt EXTENDED_HISTORY
setopt share_history
setopt hist_ignore_all_dups
setopt hist_ignore_space

# Completion configuration
setopt auto_param_slash
setopt mark_dirs
setopt list_types
setopt auto_menu
setopt auto_param_keys
setopt interactive_comments
setopt magic_equal_subst
setopt complete_in_word
setopt always_last_prompt
setopt print_eight_bit
setopt extended_glob
setopt globdots
setopt list_packed

autoload -U compinit
compinit

zstyle ':completion:*:default' menu select=2
zstyle ':completion:*' verbose yes
zstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history
zstyle ':completion:*:messages' format $YELLOW'%d'$DEFAULT
zstyle ':completion:*:warnings' format $RED'No matches for:'$YELLOW' %d'$DEFAULT
zstyle ':completion:*:descriptions' format $YELLOW'completing %B%d%b'$DEFAULT
zstyle ':completion:*:corrections' format $YELLOW'%B%d '$RED'(errors: %e)%b'$DEFAULT
zstyle ':completion:*:options' description 'yes'
zstyle ':completion:*' group-name ''

export LS_COLORS='di=94:ln=35:so=32:pi=33:ex=31:bd=46;94:cd=43;94:su=41;30:sg=46;30:tw=42;30:ow=43;30'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# Prompt and VCS
setopt correct
SPROMPT="correct: %F{red}%R%f -> %F{green}%r%f ? [No/Yes/Abort/Edit]"

autoload -Uz add-zsh-hook
autoload -Uz vcs_info
autoload -Uz is-at-least

zstyle ":vcs_info:*" enable git svn hg bzr
zstyle ":vcs_info:*" formats "(%s)-[%b]"
zstyle ":vcs_info:*" actionformats "(%s)-[%b|%a]"
zstyle ":vcs_info:(svn|bzr):*" branchformat "%b:r%r"
zstyle ":vcs_info:bzr:*" use-simple true
zstyle ":vcs_info:*" max-exports 6

if is-at-least 4.3.10; then
  zstyle ":vcs_info:git:*" check-for-changes true
  zstyle ":vcs_info:git:*" stagedstr "<S>"
  zstyle ":vcs_info:git:*" unstagedstr "<U>"
  zstyle ":vcs_info:git:*" formats "(%b) %c%u"
  zstyle ":vcs_info:git:*" actionformats "(%s)-[%b|%a] %c%u"
fi

function _update_vcs_info_msg() {
  psvar=()
  LANG=en_US.UTF-8 vcs_info
  [[ -n "$vcs_info_msg_0_" ]] && psvar[1]="$vcs_info_msg_0_"
}

RPROMPT="[%F{blue}%~%f%1(v|%F{green}%1v%f|)]"
add-zsh-hook precmd _update_vcs_info_msg

# Tool integrations
if command -v mise &> /dev/null; then
    eval "$(mise activate zsh)"
    export PATH="$HOME/.local/share/mise/shims:$PATH"
fi



### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zinit-zsh/z-a-rust \
    zinit-zsh/z-a-as-monitor \
    zinit-zsh/z-a-patch-dl \
    zinit-zsh/z-a-bin-gem-node
### End of Zinit's installer chunk

zinit wait lucid for \
    sbin b4b4r07/enhancd \
    sbin supercrabtree/k \
    sbin zsh-users/zsh-syntax-highlighting \

zinit lucid for \
    sbin danihodovic/steeef \

# FZF integration
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Starship prompt (overrides default prompt if available)
if command -v starship &> /dev/null; then
    eval "$(starship init zsh)"
fi

# Zoxide - smarter cd
if command -v zoxide &> /dev/null; then
    eval "$(zoxide init --cmd cd --hook pwd zsh)"
fi

# Modern CLI abbreviations will be loaded via init-abbr.zsh

# zsh-abbr - abbreviation expansion
if [[ -f /usr/local/share/zsh-abbr/zsh-abbr.zsh ]]; then
    source /usr/local/share/zsh-abbr/zsh-abbr.zsh
    FPATH=/usr/local/share/zsh-abbr:$FPATH
fi

# Load abbreviations
if [[ -f $XDG_CONFIG_HOME/zsh/init-abbr.zsh ]]; then
    source $XDG_CONFIG_HOME/zsh/init-abbr.zsh
fi

# GitHub Copilot CLI integration
if [[ -f $XDG_CONFIG_HOME/zsh/copilot.zsh ]]; then
    source $XDG_CONFIG_HOME/zsh/copilot.zsh
fi